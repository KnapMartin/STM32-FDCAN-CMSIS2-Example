
TestCan_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08009be8  08009be8  0000abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d7c  08009d7c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d84  08009d84  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d88  08009d88  0000ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009d8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003758  2000006c  08009df8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037c4  08009df8  0000b7c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206dc  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fbd  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155a  00000000  00000000  000312c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007620  00000000  00000000  0003281a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6b5  00000000  00000000  00039e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010de2a  00000000  00000000  000574ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d60  00000000  00000000  0016535c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009bd0 	.word	0x08009bd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009bd0 	.word	0x08009bd0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern "C" int _write(int file, char *data, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, 100);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <_write+0x24>)
 80005c6:	f003 fadd 	bl	8003b84 <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec

080005d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005dc:	f000 fd1f 	bl	800101e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e0:	f000 f86c 	bl	80006bc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e4:	f000 f96c 	bl	80008c0 <_ZL12MX_GPIO_Initv>
	MX_FDCAN1_Init();
 80005e8:	f000 f8be 	bl	8000768 <_ZL14MX_FDCAN1_Initv>
	MX_USART2_UART_Init();
 80005ec:	f000 f908 	bl	8000800 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005f0:	4824      	ldr	r0, [pc, #144]	@ (8000684 <main+0xac>)
 80005f2:	f001 f845 	bl	8001680 <HAL_FDCAN_Start>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <main+0x34>
	{
		printf("error\r\n");
 8000606:	4820      	ldr	r0, [pc, #128]	@ (8000688 <main+0xb0>)
 8000608:	f008 fc70 	bl	8008eec <puts>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1,
 800060c:	2207      	movs	r2, #7
 800060e:	2181      	movs	r1, #129	@ 0x81
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <main+0xac>)
 8000612:	f001 f9a9 	bl	8001968 <HAL_FDCAN_ActivateNotification>
 8000616:	4603      	mov	r3, r0
	FDCAN_IT_TX_COMPLETE | FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
	FDCAN_TX_BUFFER0 | FDCAN_TX_BUFFER1 | FDCAN_TX_BUFFER2) != HAL_OK)
 8000618:	2b00      	cmp	r3, #0
 800061a:	bf14      	ite	ne
 800061c:	2301      	movne	r3, #1
 800061e:	2300      	moveq	r3, #0
 8000620:	b2db      	uxtb	r3, r3
	if (HAL_FDCAN_ActivateNotification(&hfdcan1,
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <main+0x54>
	{
		printf("error\r\n");
 8000626:	4818      	ldr	r0, [pc, #96]	@ (8000688 <main+0xb0>)
 8000628:	f008 fc60 	bl	8008eec <puts>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800062c:	f004 fd58 	bl	80050e0 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of mutexCan */
	mutexCanHandle = osMutexNew(&mutexCan_attributes);
 8000630:	4816      	ldr	r0, [pc, #88]	@ (800068c <main+0xb4>)
 8000632:	f004 fe4c 	bl	80052ce <osMutexNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <main+0xb8>)
 800063a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of semCan */
	semCanHandle = osSemaphoreNew(1, 1, &semCan_attributes);
 800063c:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <main+0xbc>)
 800063e:	2101      	movs	r1, #1
 8000640:	2001      	movs	r0, #1
 8000642:	f004 ff52 	bl	80054ea <osSemaphoreNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <main+0xc0>)
 800064a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of queueCan */
	queueCanHandle = osMessageQueueNew(16, sizeof(CanMsg),
 800064c:	4a13      	ldr	r2, [pc, #76]	@ (800069c <main+0xc4>)
 800064e:	2154      	movs	r1, #84	@ 0x54
 8000650:	2010      	movs	r0, #16
 8000652:	f005 f869 	bl	8005728 <osMessageQueueNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <main+0xc8>)
 800065a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of task0 */
	task0Handle = osThreadNew(startTask0, NULL, &task0_attributes);
 800065c:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <main+0xcc>)
 800065e:	2100      	movs	r1, #0
 8000660:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <main+0xd0>)
 8000662:	f004 fd87 	bl	8005174 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a10      	ldr	r2, [pc, #64]	@ (80006ac <main+0xd4>)
 800066a:	6013      	str	r3, [r2, #0]

	/* creation of task1 */
	task1Handle = osThreadNew(startTask1, NULL, &task1_attributes);
 800066c:	4a10      	ldr	r2, [pc, #64]	@ (80006b0 <main+0xd8>)
 800066e:	2100      	movs	r1, #0
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <main+0xdc>)
 8000672:	f004 fd7f 	bl	8005174 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <main+0xe0>)
 800067a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800067c:	f004 fd54 	bl	8005128 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0xa8>
 8000684:	20000088 	.word	0x20000088
 8000688:	08009c18 	.word	0x08009c18
 800068c:	08009cd8 	.word	0x08009cd8
 8000690:	2000018c 	.word	0x2000018c
 8000694:	08009ce8 	.word	0x08009ce8
 8000698:	20000190 	.word	0x20000190
 800069c:	08009cc0 	.word	0x08009cc0
 80006a0:	20000188 	.word	0x20000188
 80006a4:	08009c78 	.word	0x08009c78
 80006a8:	08000ab9 	.word	0x08000ab9
 80006ac:	20000180 	.word	0x20000180
 80006b0:	08009c9c 	.word	0x08009c9c
 80006b4:	08000add 	.word	0x08000add
 80006b8:	20000184 	.word	0x20000184

080006bc <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2238      	movs	r2, #56	@ 0x38
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f008 fcee 	bl	80090ac <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006de:	2000      	movs	r0, #0
 80006e0:	f001 fe52 	bl	8002388 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2340      	movs	r3, #64	@ 0x40
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80006fe:	2355      	movs	r3, #85	@ 0x55
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4618      	mov	r0, r3
 8000714:	f001 feec 	bl	80024f0 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	bf14      	ite	ne
 800071e:	2301      	movne	r3, #1
 8000720:	2300      	moveq	r3, #0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <_Z18SystemClock_Configv+0x70>
	{
		Error_Handler();
 8000728:	f000 fa04 	bl	8000b34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2104      	movs	r1, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9e5 	bl	8002b14 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 800075a:	f000 f9eb 	bl	8000b34 <Error_Handler>
	}
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <_ZL14MX_FDCAN1_Initv>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 800076e:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <_ZL14MX_FDCAN1_Initv+0x94>)
 8000770:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000774:	2201      	movs	r2, #1
 8000776:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000780:	2204      	movs	r2, #4
 8000782:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 283;
 8000796:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 8000798:	f240 121b 	movw	r2, #283	@ 0x11b
 800079c:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007be:	2201      	movs	r2, #1
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <_ZL14MX_FDCAN1_Initv+0x90>)
 80007dc:	f000 fdf6 	bl	80013cc <HAL_FDCAN_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <_ZL14MX_FDCAN1_Initv+0x8c>
	{
		Error_Handler();
 80007f0:	f000 f9a0 	bl	8000b34 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000088 	.word	0x20000088
 80007fc:	40006400 	.word	0x40006400

08000800 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000806:	4a2d      	ldr	r2, [pc, #180]	@ (80008bc <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000808:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000848:	481b      	ldr	r0, [pc, #108]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800084a:	f003 f94b 	bl	8003ae4 <HAL_UART_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_ZL19MX_USART2_UART_Initv+0x62>
	{
		Error_Handler();
 800085e:	f000 f969 	bl	8000b34 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000862:	2100      	movs	r1, #0
 8000864:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000866:	f004 fb2c 	bl	8004ec2 <HAL_UARTEx_SetTxFifoThreshold>
 800086a:	4603      	mov	r3, r0
			!= HAL_OK)
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <_ZL19MX_USART2_UART_Initv+0x7e>
	{
		Error_Handler();
 800087a:	f000 f95b 	bl	8000b34 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800087e:	2100      	movs	r1, #0
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000882:	f004 fb5c 	bl	8004f3e <HAL_UARTEx_SetRxFifoThreshold>
 8000886:	4603      	mov	r3, r0
			!= HAL_OK)
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <_ZL19MX_USART2_UART_Initv+0x9a>
	{
		Error_Handler();
 8000896:	f000 f94d 	bl	8000b34 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800089c:	f004 fad8 	bl	8004e50 <HAL_UARTEx_DisableFifoMode>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_ZL19MX_USART2_UART_Initv+0xb4>
	{
		Error_Handler();
 80008b0:	f000 f940 	bl	8000b34 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000ec 	.word	0x200000ec
 80008bc:	40004400 	.word	0x40004400

080008c0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a2e      	ldr	r2, [pc, #184]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0320 	and.w	r3, r3, #32
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093e:	f001 fce7 	bl	8002310 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <_ZL12MX_GPIO_Initv+0xd8>)
 800095a:	f001 fb57 	bl	800200c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f001 fb48 	bl	800200c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2107      	movs	r1, #7
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f000 fc3b 	bl	80011fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000986:	2028      	movs	r0, #40	@ 0x28
 8000988:	f000 fc52 	bl	8001230 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	48000800 	.word	0x48000800

0800099c <HAL_FDCAN_TxBufferCompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t BufferIndexes)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == hfdcan1.Instance)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_FDCAN_TxBufferCompleteCallback+0x30>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d107      	bne.n	80009c2 <HAL_FDCAN_TxBufferCompleteCallback+0x26>
	{
		osSemaphoreRelease(semCanHandle);
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_FDCAN_TxBufferCompleteCallback+0x34>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 fe72 	bl	80056a0 <osSemaphoreRelease>
		printf("isr: tx\r\n");
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_FDCAN_TxBufferCompleteCallback+0x38>)
 80009be:	f008 fa95 	bl	8008eec <puts>
	}
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000088 	.word	0x20000088
 80009d0:	20000190 	.word	0x20000190
 80009d4:	08009c20 	.word	0x08009c20

080009d8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifoITs)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b098      	sub	sp, #96	@ 0x60
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	if (hfdcan->Instance == hfdcan1.Instance)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d118      	bne.n	8000a20 <HAL_FDCAN_RxFifo0Callback+0x48>
	{
		if (RxFifoITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d013      	beq.n	8000a20 <HAL_FDCAN_RxFifo0Callback+0x48>
		{
			CanMsg msg;
			HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &msg.rxHeader, msg.data);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	334c      	adds	r3, #76	@ 0x4c
 80009fe:	f107 020c 	add.w	r2, r7, #12
 8000a02:	2140      	movs	r1, #64	@ 0x40
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a06:	f000 fea7 	bl	8001758 <HAL_FDCAN_GetRxMessage>
			osMessageQueuePut(queueCanHandle, &msg, 0, 0);
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	f004 fefb 	bl	8005810 <osMessageQueuePut>
			printf("isr: rx\r\n");
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000a1c:	f008 fa66 	bl	8008eec <puts>
		}
	}
}
 8000a20:	bf00      	nop
 8000a22:	3760      	adds	r7, #96	@ 0x60
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000088 	.word	0x20000088
 8000a2c:	20000188 	.word	0x20000188
 8000a30:	08009c2c 	.word	0x08009c2c

08000a34 <_Z8can_sendv>:

void can_send()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0
	FDCAN_TxHeaderTypeDef txHeader;
	txHeader.Identifier = 0x006;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	60fb      	str	r3, [r7, #12]
	txHeader.IdType = FDCAN_STANDARD_ID;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
	txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000a46:	2308      	movs	r3, #8
 8000a48:	61bb      	str	r3, [r7, #24]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
	txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.MessageMarker = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t txData[8] =
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <_Z8can_sendv+0x74>)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a66:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 'C', 'A', 'N', ' ', 'm', 'e', 's', 'g' };

	osMutexAcquire(mutexCanHandle, osWaitForever);
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <_Z8can_sendv+0x78>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fcb1 	bl	80053da <osMutexAcquire>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData);
 8000a78:	1d3a      	adds	r2, r7, #4
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <_Z8can_sendv+0x7c>)
 8000a82:	f000 fe25 	bl	80016d0 <HAL_FDCAN_AddMessageToTxFifoQ>

	osSemaphoreAcquire(semCanHandle, osWaitForever);
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <_Z8can_sendv+0x80>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fdb4 	bl	80055fc <osSemaphoreAcquire>

	osMutexRelease(mutexCanHandle);
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <_Z8can_sendv+0x78>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 fce9 	bl	8005470 <osMutexRelease>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	@ 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08009c38 	.word	0x08009c38
 8000aac:	2000018c 	.word	0x2000018c
 8000ab0:	20000088 	.word	0x20000088
 8000ab4:	20000190 	.word	0x20000190

08000ab8 <_Z10startTask0Pv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask0 */
void startTask0(void *argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	printf("Can test v1\r\n");
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <_Z10startTask0Pv+0x20>)
 8000ac2:	f008 fa13 	bl	8008eec <puts>

	/* Infinite loop */
	for (;;)
	{
		osDelay(1e3);
 8000ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aca:	f004 fbe5 	bl	8005298 <osDelay>

		can_send();
 8000ace:	f7ff ffb1 	bl	8000a34 <_Z8can_sendv>
		osDelay(1e3);
 8000ad2:	bf00      	nop
 8000ad4:	e7f7      	b.n	8000ac6 <_Z10startTask0Pv+0xe>
 8000ad6:	bf00      	nop
 8000ad8:	08009c40 	.word	0x08009c40

08000adc <_Z10startTask1Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTask1 */
void startTask1(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b098      	sub	sp, #96	@ 0x60
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTask1 */
	/* Infinite loop */
	for (;;)
	{
		CanMsg msg;
		osMessageQueueGet(queueCanHandle, &msg, nullptr, osWaitForever);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_Z10startTask1Pv+0x2c>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	f107 010c 	add.w	r1, r7, #12
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af0:	2200      	movs	r2, #0
 8000af2:	f004 feed 	bl	80058d0 <osMessageQueueGet>
		printf("got msg: %s\r\n", msg.data);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	334c      	adds	r3, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <_Z10startTask1Pv+0x30>)
 8000b00:	f008 f98c 	bl	8008e1c <iprintf>
	}
 8000b04:	bf00      	nop
 8000b06:	e7ed      	b.n	8000ae4 <_Z10startTask1Pv+0x8>
 8000b08:	20000188 	.word	0x20000188
 8000b0c:	08009c50 	.word	0x08009c50

08000b10 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000b22:	f000 fa95 	bl	8001050 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40001000 	.word	0x40001000

08000b34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x50>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fb3d 	bl	80011fc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 fca5 	bl	80024d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	@ 0x78
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2254      	movs	r2, #84	@ 0x54
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 fa79 	bl	80090ac <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <HAL_FDCAN_MspInit+0xcc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d149      	bne.n	8000c58 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 f9eb 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000be0:	f7ff ffa8 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000be4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000bea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <HAL_FDCAN_MspInit+0xd0>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c26:	2309      	movs	r3, #9
 8000c28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f001 f9ea 	bl	800200c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2015      	movs	r0, #21
 8000c3e:	f000 fadd 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c42:	2015      	movs	r0, #21
 8000c44:	f000 faf4 	bl	8001230 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2106      	movs	r1, #6
 8000c4c:	2016      	movs	r0, #22
 8000c4e:	f000 fad5 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c52:	2016      	movs	r0, #22
 8000c54:	f000 faec 	bl	8001230 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c58:	bf00      	nop
 8000c5a:	3778      	adds	r7, #120	@ 0x78
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40006400 	.word	0x40006400
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09e      	sub	sp, #120	@ 0x78
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2254      	movs	r2, #84	@ 0x54
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f008 fa0f 	bl	80090ac <memset>
  if(huart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a23      	ldr	r2, [pc, #140]	@ (8000d20 <HAL_UART_MspInit+0xb8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d13e      	bne.n	8000d16 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 f983 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff ff40 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_UART_MspInit+0xbc>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f001 f983 	bl	800200c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2106      	movs	r1, #6
 8000d0a:	2026      	movs	r0, #38	@ 0x26
 8000d0c:	f000 fa76 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d10:	2026      	movs	r0, #38	@ 0x26
 8000d12:	f000 fa8d 	bl	8001230 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3778      	adds	r7, #120	@ 0x78
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <HAL_InitTick+0xc4>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <HAL_InitTick+0xc4>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <HAL_InitTick+0xc4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d50:	f107 020c 	add.w	r2, r7, #12
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 f8b0 	bl	8002ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d60:	f002 f882 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8000d64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d68:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <HAL_InitTick+0xc8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	3b01      	subs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d76:	4a20      	ldr	r2, [pc, #128]	@ (8000df8 <HAL_InitTick+0xd0>)
 8000d78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000d96:	f002 fb59 	bl	800344c <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000da0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <HAL_InitTick+0xcc>)
 8000daa:	f002 fbb1 	bl	8003510 <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dbc:	2036      	movs	r0, #54	@ 0x36
 8000dbe:	f000 fa37 	bl	8001230 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	2036      	movs	r0, #54	@ 0x36
 8000dce:	f000 fa15 	bl	80011fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0xd4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	@ 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000194 	.word	0x20000194
 8000df8:	40001000 	.word	0x40001000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e3e:	f000 fe79 	bl	8001b34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000088 	.word	0x20000088

08000e4c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <FDCAN1_IT1_IRQHandler+0x10>)
 8000e52:	f000 fe6f 	bl	8001b34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000088 	.word	0x20000088

08000e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f002 ff1b 	bl	8003ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000ec 	.word	0x200000ec

08000e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e7c:	f001 fa60 	bl	8002340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <TIM6_DAC_IRQHandler+0x10>)
 8000e8a:	f002 fbb9 	bl	8003600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000194 	.word	0x20000194

08000e98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e00a      	b.n	8000ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eaa:	f3af 8000 	nop.w
 8000eae:	4601      	mov	r1, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf0      	blt.n	8000eaa <_read+0x12>
  }

  return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000efa:	605a      	str	r2, [r3, #4]
  return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f008 f8ec 	bl	8009148 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200001e0 	.word	0x200001e0
 8000fa4:	200037c8 	.word	0x200037c8

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f008 f8ab 	bl	8009154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff faeb 	bl	80005d8 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   r0, =_estack
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001010:	08009d8c 	.word	0x08009d8c
  ldr r2, =_sbss
 8001014:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001018:	200037c4 	.word	0x200037c4

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>

0800101e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f8dc 	bl	80011e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	200f      	movs	r0, #15
 8001030:	f7ff fe7a 	bl	8000d28 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e001      	b.n	8001044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001040:	f7ff fd7e 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001044:	79fb      	ldrb	r3, [r7, #7]

}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_IncTick+0x1c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_IncTick+0x20>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4413      	add	r3, r2
 800105e:	4a03      	ldr	r2, [pc, #12]	@ (800106c <HAL_IncTick+0x1c>)
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	200001e4 	.word	0x200001e4
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200001e4 	.word	0x200001e4

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff4c 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120a:	f7ff ff63 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 800120e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7ff ffb3 	bl	8001180 <NVIC_EncodePriority>
 800121a:	4602      	mov	r2, r0
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff82 	bl	800112c <__NVIC_SetPriority>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff56 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d005      	beq.n	8001270 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2204      	movs	r2, #4
 8001268:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e037      	b.n	80012e0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 020e 	bic.w	r2, r2, #14
 800127e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800128a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800128e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012bc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012d4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012de:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d00d      	beq.n	8001332 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2204      	movs	r2, #4
 800131a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e047      	b.n	80013c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f003 021f 	and.w	r2, r3, #31
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800137e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001392:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
    }
  }
  return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e147      	b.n	800166e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fbce 	bl	8000b94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0210 	bic.w	r2, r2, #16
 8001406:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff fe34 	bl	8001074 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800140e:	e012      	b.n	8001436 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001410:	f7ff fe30 	bl	8001074 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d90b      	bls.n	8001436 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e11b      	b.n	800166e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b08      	cmp	r3, #8
 8001442:	d0e5      	beq.n	8001410 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001454:	f7ff fe0e 	bl	8001074 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800145a:	e012      	b.n	8001482 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800145c:	f7ff fe0a 	bl	8001074 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d90b      	bls.n	8001482 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0f5      	b.n	800166e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0e5      	beq.n	800145c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0202 	orr.w	r2, r2, #2
 800149e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a74      	ldr	r2, [pc, #464]	@ (8001678 <HAL_FDCAN_Init+0x2ac>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d103      	bne.n	80014b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80014aa:	4a74      	ldr	r2, [pc, #464]	@ (800167c <HAL_FDCAN_Init+0x2b0>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7c1b      	ldrb	r3, [r3, #16]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	e007      	b.n	80014dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c5b      	ldrb	r3, [r3, #17]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	e007      	b.n	8001506 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001504:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7c9b      	ldrb	r3, [r3, #18]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800151c:	619a      	str	r2, [r3, #24]
 800151e:	e007      	b.n	8001530 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800152e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001554:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0210 	bic.w	r2, r2, #16
 8001564:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0204 	orr.w	r2, r2, #4
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	e02c      	b.n	80015da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d028      	beq.n	80015da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d01c      	beq.n	80015ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800159e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0210 	orr.w	r2, r2, #16
 80015ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d110      	bne.n	80015da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	619a      	str	r2, [r3, #24]
 80015c8:	e007      	b.n	80015da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	3b01      	subs	r3, #1
 80015e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001602:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001604:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800160e:	d115      	bne.n	800163c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	3b01      	subs	r3, #1
 800161c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800161e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	3b01      	subs	r3, #1
 8001626:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001628:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	3b01      	subs	r3, #1
 8001632:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001638:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800163a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fbf2 	bl	8001e3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40006400 	.word	0x40006400
 800167c:	40006500 	.word	0x40006500

08001680 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d110      	bne.n	80016b6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f043 0204 	orr.w	r2, r3, #4
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d12c      	bne.n	8001742 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e023      	b.n	8001750 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fbf8 	bl	8001f14 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001734:	2201      	movs	r2, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e006      	b.n	8001750 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	f043 0208 	orr.w	r2, r3, #8
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001758:	b480      	push	{r7}
 800175a:	b08b      	sub	sp, #44	@ 0x2c
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001770:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001772:	7efb      	ldrb	r3, [r7, #27]
 8001774:	2b02      	cmp	r3, #2
 8001776:	f040 80e8 	bne.w	800194a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b40      	cmp	r3, #64	@ 0x40
 800177e:	d137      	bne.n	80017f0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001794:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0db      	b.n	8001958 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a8:	0e1b      	lsrs	r3, r3, #24
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10a      	bne.n	80017c8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ba:	0a5b      	lsrs	r3, r3, #9
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ee:	e036      	b.n	800185e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0a3      	b.n	8001958 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001818:	0e1b      	lsrs	r3, r3, #24
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10a      	bne.n	8001838 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001834:	2301      	movs	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e005      	b.n	800188e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	3304      	adds	r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	f003 020f 	and.w	r2, r3, #15
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0fda      	lsrs	r2, r3, #31
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	3304      	adds	r3, #4
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
 8001902:	e00a      	b.n	800191a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	441a      	add	r2, r3
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	440b      	add	r3, r1
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	3301      	adds	r3, #1
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	461a      	mov	r2, r3
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	4293      	cmp	r3, r2
 8001928:	d3ec      	bcc.n	8001904 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b40      	cmp	r3, #64	@ 0x40
 800192e:	d105      	bne.n	800193c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800193a:	e004      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e006      	b.n	8001958 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	f043 0208 	orr.w	r2, r3, #8
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	372c      	adds	r7, #44	@ 0x2c
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	08009d10 	.word	0x08009d10

08001968 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800197a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <HAL_FDCAN_ActivateNotification+0x22>
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b02      	cmp	r3, #2
 8001986:	f040 80c8 	bne.w	8001b1a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03b      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d031      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d027      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01d      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d013      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d13b      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d131      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d127      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d11d      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d113      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00c      	beq.n	8001aca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0202 	orr.w	r2, r2, #2
 8001ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e006      	b.n	8001b28 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
  }
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b42:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b50:	4013      	ands	r3, r2
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b68:	4013      	ands	r3, r2
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	4013      	ands	r3, r2
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001b8e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	6a3a      	ldr	r2, [r7, #32]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ba6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2240      	movs	r2, #64	@ 0x40
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f90b 	bl	8001dfc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d019      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d014      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c02:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8cd 	bl	8001dbe <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8a2 	bl	8001d7e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fec4 	bl	80009d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f897 	bl	8001d94 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c82:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f890 	bl	8001daa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d018      	beq.n	8001cc6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d013      	beq.n	8001cc6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ca6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fe6b 	bl	800099c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00c      	beq.n	8001cea <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f875 	bl	8001dd4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f86d 	bl	8001de8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00f      	beq.n	8001d38 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d46:	69f9      	ldr	r1, [r7, #28]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f86b 	bl	8001e24 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f84d 	bl	8001e10 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e44:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001e46:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f0c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d103      	bne.n	8001e5a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001e58:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f10 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d103      	bne.n	8001e6c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001e6a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e7a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea8:	061a      	lsls	r2, r3, #24
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e005      	b.n	8001eee <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3f3      	bcc.n	8001ee2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	4000a400 	.word	0x4000a400
 8001f0c:	40006800 	.word	0x40006800
 8001f10:	40006c00 	.word	0x40006c00

08001f14 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f32:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e00a      	b.n	8001f56 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f48:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f4e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f54:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f60:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f66:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f6c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	3304      	adds	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e020      	b.n	8001fea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3303      	adds	r3, #3
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	440b      	add	r3, r1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fc0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	440b      	add	r3, r1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	440a      	add	r2, r1
 8001fd6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fd8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <FDCAN_CopyMessageToRAM+0xf4>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d3d6      	bcc.n	8001fa8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	3724      	adds	r7, #36	@ 0x24
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	08009d10 	.word	0x08009d10

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800201a:	e15a      	b.n	80022d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 814c 	beq.w	80022cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a6 	beq.w	80022cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <HAL_GPIO_Init+0x2e4>)
 8002182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002184:	4a5a      	ldr	r2, [pc, #360]	@ (80022f0 <HAL_GPIO_Init+0x2e4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6613      	str	r3, [r2, #96]	@ 0x60
 800218c:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <HAL_GPIO_Init+0x2e4>)
 800218e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002198:	4a56      	ldr	r2, [pc, #344]	@ (80022f4 <HAL_GPIO_Init+0x2e8>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021c2:	d01f      	beq.n	8002204 <HAL_GPIO_Init+0x1f8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a4c      	ldr	r2, [pc, #304]	@ (80022f8 <HAL_GPIO_Init+0x2ec>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d019      	beq.n	8002200 <HAL_GPIO_Init+0x1f4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <HAL_GPIO_Init+0x2f0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <HAL_GPIO_Init+0x1f0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_GPIO_Init+0x2f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00d      	beq.n	80021f8 <HAL_GPIO_Init+0x1ec>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_GPIO_Init+0x2f8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x1e8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a48      	ldr	r2, [pc, #288]	@ (8002308 <HAL_GPIO_Init+0x2fc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_GPIO_Init+0x1e4>
 80021ec:	2305      	movs	r3, #5
 80021ee:	e00a      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 80021f0:	2306      	movs	r3, #6
 80021f2:	e008      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1fa>
 8002204:	2300      	movs	r3, #0
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002216:	4937      	ldr	r1, [pc, #220]	@ (80022f4 <HAL_GPIO_Init+0x2e8>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002224:	4b39      	ldr	r3, [pc, #228]	@ (800230c <HAL_GPIO_Init+0x300>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002248:	4a30      	ldr	r2, [pc, #192]	@ (800230c <HAL_GPIO_Init+0x300>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800224e:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <HAL_GPIO_Init+0x300>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002272:	4a26      	ldr	r2, [pc, #152]	@ (800230c <HAL_GPIO_Init+0x300>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002278:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_GPIO_Init+0x300>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800229c:	4a1b      	ldr	r2, [pc, #108]	@ (800230c <HAL_GPIO_Init+0x300>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <HAL_GPIO_Init+0x300>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022c6:	4a11      	ldr	r2, [pc, #68]	@ (800230c <HAL_GPIO_Init+0x300>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f ae9d 	bne.w	800201c <HAL_GPIO_Init+0x10>
  }
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48000800 	.word	0x48000800
 8002300:	48000c00 	.word	0x48000c00
 8002304:	48001000 	.word	0x48001000
 8002308:	48001400 	.word	0x48001400
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232c:	e002      	b.n	8002334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f806 	bl	8002370 <HAL_GPIO_EXTI_Callback>
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d141      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002396:	4b4b      	ldr	r3, [pc, #300]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a2:	d131      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a4:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023aa:	4a46      	ldr	r2, [pc, #280]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b4:	4b43      	ldr	r3, [pc, #268]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023bc:	4a41      	ldr	r2, [pc, #260]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023c4:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2232      	movs	r2, #50	@ 0x32
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	4a3f      	ldr	r2, [pc, #252]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	3301      	adds	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023da:	e002      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e2:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ee:	d102      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f2      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f6:	4b33      	ldr	r3, [pc, #204]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002402:	d158      	bne.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e057      	b.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002408:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800240e:	4a2d      	ldr	r2, [pc, #180]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002414:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002418:	e04d      	b.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002420:	d141      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002422:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242e:	d131      	bne.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002430:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002436:	4a23      	ldr	r2, [pc, #140]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002440:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002448:	4a1e      	ldr	r2, [pc, #120]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2232      	movs	r2, #50	@ 0x32
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9b      	lsrs	r3, r3, #18
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002466:	e002      	b.n	800246e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3b01      	subs	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	d102      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f2      	bne.n	8002468 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248e:	d112      	bne.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e011      	b.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024a4:	e007      	b.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40007000 	.word	0x40007000
 80024c8:	20000000 	.word	0x20000000
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024de:	6093      	str	r3, [r2, #8]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40007000 	.word	0x40007000

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e2fe      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d075      	beq.n	80025fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250e:	4b97      	ldr	r3, [pc, #604]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002518:	4b94      	ldr	r3, [pc, #592]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0x3e>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d002      	beq.n	8002534 <HAL_RCC_OscConfig+0x44>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	4b8d      	ldr	r3, [pc, #564]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05b      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d157      	bne.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e2d9      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x74>
 8002556:	4b85      	ldr	r3, [pc, #532]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a84      	ldr	r2, [pc, #528]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e01d      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b7f      	ldr	r3, [pc, #508]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7e      	ldr	r2, [pc, #504]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b7c      	ldr	r3, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7b      	ldr	r2, [pc, #492]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002588:	4b78      	ldr	r3, [pc, #480]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a77      	ldr	r2, [pc, #476]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b75      	ldr	r3, [pc, #468]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a74      	ldr	r2, [pc, #464]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fd64 	bl	8001074 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fd60 	bl	8001074 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e29e      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c2:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd50 	bl	8001074 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe fd4c 	bl	8001074 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e28a      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ea:	4b60      	ldr	r3, [pc, #384]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002606:	4b59      	ldr	r3, [pc, #356]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002610:	4b56      	ldr	r3, [pc, #344]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x136>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d002      	beq.n	800262c <HAL_RCC_OscConfig+0x13c>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d11f      	bne.n	800266c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262c:	4b4f      	ldr	r3, [pc, #316]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_OscConfig+0x154>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e25d      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b49      	ldr	r3, [pc, #292]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	4946      	ldr	r1, [pc, #280]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002658:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <HAL_RCC_OscConfig+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb63 	bl	8000d28 <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d043      	beq.n	80026f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e249      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3c      	ldr	r2, [pc, #240]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fcf8 	bl	8001074 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fcf4 	bl	8001074 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e232      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269a:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	492d      	ldr	r1, [pc, #180]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
 80026ba:	e01a      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2a      	ldr	r2, [pc, #168]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80026c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fcd4 	bl	8001074 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fcd0 	bl	8001074 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e20e      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e2:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e0>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d041      	beq.n	8002782 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01c      	beq.n	8002740 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fe fcad 	bl	8001074 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271e:	f7fe fca9 	bl	8001074 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1e7      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002730:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ef      	beq.n	800271e <HAL_RCC_OscConfig+0x22e>
 800273e:	e020      	b.n	8002782 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <HAL_RCC_OscConfig+0x27c>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fc90 	bl	8001074 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002756:	e00d      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fc8c 	bl	8001074 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d906      	bls.n	8002774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1ca      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	4b8c      	ldr	r3, [pc, #560]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ea      	bne.n	8002758 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80a6 	beq.w	80028dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002794:	4b84      	ldr	r3, [pc, #528]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2b4>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x2b6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a7e      	ldr	r2, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b6:	4b7c      	ldr	r3, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	4b79      	ldr	r3, [pc, #484]	@ (80029ac <HAL_RCC_OscConfig+0x4bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x4bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	@ (80029ac <HAL_RCC_OscConfig+0x4bc>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe fc49 	bl	8001074 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fc45 	bl	8001074 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e183      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f8:	4b6c      	ldr	r3, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x4bc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_RCC_OscConfig+0x32e>
 800280c:	4b66      	ldr	r3, [pc, #408]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a65      	ldr	r2, [pc, #404]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800281c:	e024      	b.n	8002868 <HAL_RCC_OscConfig+0x378>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d110      	bne.n	8002848 <HAL_RCC_OscConfig+0x358>
 8002826:	4b60      	ldr	r3, [pc, #384]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	4a5e      	ldr	r2, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002836:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002846:	e00f      	b.n	8002868 <HAL_RCC_OscConfig+0x378>
 8002848:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4a56      	ldr	r2, [pc, #344]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d016      	beq.n	800289e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fc00 	bl	8001074 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fbfc 	bl	8001074 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e138      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288e:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ed      	beq.n	8002878 <HAL_RCC_OscConfig+0x388>
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fbe9 	bl	8001074 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fbe5 	bl	8001074 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e121      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028bc:	4b3a      	ldr	r3, [pc, #232]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ed      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b35      	ldr	r3, [pc, #212]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d4:	4a34      	ldr	r2, [pc, #208]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03c      	beq.n	8002962 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01c      	beq.n	800292a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80028f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f6:	4a2c      	ldr	r2, [pc, #176]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fbb8 	bl	8001074 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002908:	f7fe fbb4 	bl	8001074 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0f2      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800291a:	4b23      	ldr	r3, [pc, #140]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800291c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <HAL_RCC_OscConfig+0x418>
 8002928:	e01b      	b.n	8002962 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800292a:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800292c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe fb9b 	bl	8001074 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002942:	f7fe fb97 	bl	8001074 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0d5      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002954:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ef      	bne.n	8002942 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80c9 	beq.w	8002afe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b0c      	cmp	r3, #12
 8002976:	f000 8083 	beq.w	8002a80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d15e      	bne.n	8002a40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fb71 	bl	8001074 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e00c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fb6d 	bl	8001074 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d905      	bls.n	80029b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0ab      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	4b55      	ldr	r3, [pc, #340]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ec      	bne.n	8002996 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029bc:	4b52      	ldr	r3, [pc, #328]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4b52      	ldr	r3, [pc, #328]	@ (8002b0c <HAL_RCC_OscConfig+0x61c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6a11      	ldr	r1, [r2, #32]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029cc:	3a01      	subs	r2, #1
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029d6:	0212      	lsls	r2, r2, #8
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0552      	lsls	r2, r2, #21
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ea:	0852      	lsrs	r2, r2, #1
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0652      	lsls	r2, r2, #25
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029f6:	06d2      	lsls	r2, r2, #27
 80029f8:	430a      	orrs	r2, r1
 80029fa:	4943      	ldr	r1, [pc, #268]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a40      	ldr	r2, [pc, #256]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a3d      	ldr	r2, [pc, #244]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fb2c 	bl	8001074 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fb28 	bl	8001074 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e066      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	4b35      	ldr	r3, [pc, #212]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x530>
 8002a3e:	e05e      	b.n	8002afe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a30      	ldr	r2, [pc, #192]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fb12 	bl	8001074 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fb0e 	bl	8001074 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04c      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a66:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	4924      	ldr	r1, [pc, #144]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_OscConfig+0x620>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60cb      	str	r3, [r1, #12]
 8002a7e:	e03e      	b.n	8002afe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e039      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_RCC_OscConfig+0x618>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d12c      	bne.n	8002afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d123      	bne.n	8002afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11b      	bne.n	8002afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d113      	bne.n	8002afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	019f800c 	.word	0x019f800c
 8002b10:	feeefffc 	.word	0xfeeefffc

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e11e      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b91      	ldr	r3, [pc, #580]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	498c      	ldr	r1, [pc, #560]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e106      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d073      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d129      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b70:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0f4      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b80:	f000 f9d0 	bl	8002f24 <RCC_GetSysClockFreqFromPLLSource>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4a7c      	ldr	r2, [pc, #496]	@ (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d93f      	bls.n	8002c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d033      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d12f      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bae:	4b72      	ldr	r3, [pc, #456]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bb6:	4a70      	ldr	r2, [pc, #448]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e024      	b.n	8002c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0c6      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bdc:	4b66      	ldr	r3, [pc, #408]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0be      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002bec:	f000 f8ce 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4a61      	ldr	r2, [pc, #388]	@ (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d909      	bls.n	8002c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c02:	4a5d      	ldr	r2, [pc, #372]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4957      	ldr	r1, [pc, #348]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe fa28 	bl	8001074 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fa24 	bl	8001074 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e095      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c68:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c80:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c88:	4a3b      	ldr	r2, [pc, #236]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4936      	ldr	r1, [pc, #216]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b80      	cmp	r3, #128	@ 0x80
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002caa:	4b33      	ldr	r3, [pc, #204]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d21d      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 020f 	bic.w	r2, r3, #15
 8002ccc:	4929      	ldr	r1, [pc, #164]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe f9ce 	bl	8001074 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe f9ca 	bl	8001074 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e03b      	b.n	8002d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1ed      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490f      	ldr	r1, [pc, #60]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3e:	f000 f825 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490c      	ldr	r1, [pc, #48]	@ (8002d80 <HAL_RCC_ClockConfig+0x26c>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x270>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd ffe0 	bl	8000d28 <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	04c4b400 	.word	0x04c4b400
 8002d80:	08009cf8 	.word	0x08009cf8
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d92:	4b2c      	ldr	r3, [pc, #176]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e047      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002da4:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002db0:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e03e      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002db6:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d136      	bne.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dc2:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002de0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dea:	68d2      	ldr	r2, [r2, #12]
 8002dec:	0a12      	lsrs	r2, r2, #8
 8002dee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
      break;
 8002df8:	e00c      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dfa:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4a10      	ldr	r2, [pc, #64]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	0a12      	lsrs	r2, r2, #8
 8002e08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
      break;
 8002e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0e5b      	lsrs	r3, r3, #25
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e001      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e34:	693b      	ldr	r3, [r7, #16]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	016e3600 	.word	0x016e3600

08002e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08009d08 	.word	0x08009d08

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e98:	f7ff ffda 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	@ (8002ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08009d08 	.word	0x08009d08

08002ec0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	220f      	movs	r2, #15
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ed0:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <HAL_RCC_GetClockConfig+0x5c>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	08db      	lsrs	r3, r3, #3
 8002efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCC_GetClockConfig+0x60>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	601a      	str	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40022000 	.word	0x40022000

08002f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d10c      	bne.n	8002f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	4a14      	ldr	r2, [pc, #80]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f52:	68d2      	ldr	r2, [r2, #12]
 8002f54:	0a12      	lsrs	r2, r2, #8
 8002f56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
    break;
 8002f60:	e00c      	b.n	8002f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    break;
 8002f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f96:	687b      	ldr	r3, [r7, #4]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	016e3600 	.word	0x016e3600
 8002fac:	00f42400 	.word	0x00f42400

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8098 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b40      	ldr	r3, [pc, #256]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fea:	4b3d      	ldr	r3, [pc, #244]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a39      	ldr	r2, [pc, #228]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003006:	f7fe f835 	bl	8001074 <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300c:	e009      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe f831 	bl	8001074 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	74fb      	strb	r3, [r7, #19]
        break;
 8003020:	e005      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003022:	4b30      	ldr	r3, [pc, #192]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d159      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003034:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800303e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	d019      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800305c:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	4a1f      	ldr	r2, [pc, #124]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306c:	4b1c      	ldr	r3, [pc, #112]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fd fff1 	bl	8001074 <HAL_GetTick>
 8003092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	e00b      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fd ffed 	bl	8001074 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d902      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	74fb      	strb	r3, [r7, #19]
            break;
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ec      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
 80030de:	e005      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ec:	7c7b      	ldrb	r3, [r7, #17]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4ba7      	ldr	r3, [pc, #668]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	4aa6      	ldr	r2, [pc, #664]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310a:	4ba1      	ldr	r3, [pc, #644]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	f023 0203 	bic.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	499d      	ldr	r1, [pc, #628]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312c:	4b98      	ldr	r3, [pc, #608]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f023 020c 	bic.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4995      	ldr	r1, [pc, #596]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314e:	4b90      	ldr	r3, [pc, #576]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003154:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	498c      	ldr	r1, [pc, #560]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003170:	4b87      	ldr	r3, [pc, #540]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4984      	ldr	r1, [pc, #528]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003192:	4b7f      	ldr	r3, [pc, #508]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	497b      	ldr	r1, [pc, #492]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b4:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4973      	ldr	r1, [pc, #460]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	496a      	ldr	r1, [pc, #424]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f8:	4b65      	ldr	r3, [pc, #404]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4962      	ldr	r1, [pc, #392]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321a:	4b5d      	ldr	r3, [pc, #372]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003220:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	4959      	ldr	r1, [pc, #356]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800323c:	4b54      	ldr	r3, [pc, #336]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	4951      	ldr	r1, [pc, #324]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325e:	4b4c      	ldr	r3, [pc, #304]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4948      	ldr	r1, [pc, #288]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d015      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b43      	ldr	r3, [pc, #268]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4940      	ldr	r1, [pc, #256]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329e:	d105      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032aa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032b8:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	4932      	ldr	r1, [pc, #200]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	4924      	ldr	r1, [pc, #144]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330e:	d105      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b1f      	ldr	r3, [pc, #124]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a1e      	ldr	r2, [pc, #120]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	4916      	ldr	r1, [pc, #88]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003346:	d105      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003348:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a10      	ldr	r2, [pc, #64]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d019      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003366:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4908      	ldr	r1, [pc, #32]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800337e:	d109      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a02      	ldr	r2, [pc, #8]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800338a:	60d3      	str	r3, [r2, #12]
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a0:	4b29      	ldr	r3, [pc, #164]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4926      	ldr	r1, [pc, #152]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c0:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e6:	4918      	ldr	r1, [pc, #96]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003416:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341e:	490a      	ldr	r1, [pc, #40]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800343c:	7cbb      	ldrb	r3, [r7, #18]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e049      	b.n	80034f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f841 	bl	80034fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fa30 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e054      	b.n	80035d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a26      	ldr	r2, [pc, #152]	@ (80035e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003552:	d01d      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_TIM_Base_Start_IT+0xdc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d115      	bne.n	80035bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_TIM_Base_Start_IT+0xec>)
 8003598:	4013      	ands	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d015      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0xbe>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a8:	d011      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ba:	e008      	b.n	80035ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e000      	b.n	80035d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40013400 	.word	0x40013400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40015000 	.word	0x40015000
 80035fc:	00010007 	.word	0x00010007

08003600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0202 	mvn.w	r2, #2
 8003634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f931 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f923 	bl	800389e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f934 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d020      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0204 	mvn.w	r2, #4
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f90b 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8fd 	bl	800389e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f90e 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0208 	mvn.w	r2, #8
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8e5 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8d7 	bl	800389e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8e8 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d020      	beq.n	8003748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8bf 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8b1 	bl	800389e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8c2 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0201 	mvn.w	r2, #1
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f9d2 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f969 	bl	8003a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f961 	bl	8003a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f87c 	bl	80038da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00c      	beq.n	8003806 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0220 	mvn.w	r2, #32
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f929 	bl	8003a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f935 	bl	8003a94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f92d 	bl	8003aa8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f925 	bl	8003abc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800388e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f91d 	bl	8003ad0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a4c      	ldr	r2, [pc, #304]	@ (8003a34 <TIM_Base_SetConfig+0x144>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d017      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390e:	d013      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a49      	ldr	r2, [pc, #292]	@ (8003a38 <TIM_Base_SetConfig+0x148>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00f      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a48      	ldr	r2, [pc, #288]	@ (8003a3c <TIM_Base_SetConfig+0x14c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a47      	ldr	r2, [pc, #284]	@ (8003a40 <TIM_Base_SetConfig+0x150>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a46      	ldr	r2, [pc, #280]	@ (8003a44 <TIM_Base_SetConfig+0x154>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_Base_SetConfig+0x48>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a45      	ldr	r2, [pc, #276]	@ (8003a48 <TIM_Base_SetConfig+0x158>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a39      	ldr	r2, [pc, #228]	@ (8003a34 <TIM_Base_SetConfig+0x144>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a36      	ldr	r2, [pc, #216]	@ (8003a38 <TIM_Base_SetConfig+0x148>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <TIM_Base_SetConfig+0x14c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a34      	ldr	r2, [pc, #208]	@ (8003a40 <TIM_Base_SetConfig+0x150>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a33      	ldr	r2, [pc, #204]	@ (8003a44 <TIM_Base_SetConfig+0x154>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a33      	ldr	r2, [pc, #204]	@ (8003a4c <TIM_Base_SetConfig+0x15c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a32      	ldr	r2, [pc, #200]	@ (8003a50 <TIM_Base_SetConfig+0x160>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a31      	ldr	r2, [pc, #196]	@ (8003a54 <TIM_Base_SetConfig+0x164>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xaa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2c      	ldr	r2, [pc, #176]	@ (8003a48 <TIM_Base_SetConfig+0x158>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <TIM_Base_SetConfig+0x144>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <TIM_Base_SetConfig+0x110>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <TIM_Base_SetConfig+0x154>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00f      	beq.n	8003a00 <TIM_Base_SetConfig+0x110>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <TIM_Base_SetConfig+0x15c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x110>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <TIM_Base_SetConfig+0x160>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x110>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <TIM_Base_SetConfig+0x164>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x110>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a13      	ldr	r2, [pc, #76]	@ (8003a48 <TIM_Base_SetConfig+0x158>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d103      	bne.n	8003a08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]
  }
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40015000 	.word	0x40015000
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800

08003a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e042      	b.n	8003b7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fd f8ad 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2224      	movs	r2, #36	@ 0x24
 8003b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 ff14 	bl	800495c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fc15 	bl	8004364 <UART_SetConfig>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e01b      	b.n	8003b7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 ff93 	bl	8004aa0 <UART_CheckIdleState>
 8003b7a:	4603      	mov	r3, r0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d17b      	bne.n	8003c96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_UART_Transmit+0x26>
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e074      	b.n	8003c98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	@ 0x21
 8003bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fa59 	bl	8001074 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Transmit+0x6c>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bf8:	e030      	b.n	8003c5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	@ 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fff5 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03d      	b.n	8003c98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3302      	adds	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e007      	b.n	8003c4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1c8      	bne.n	8003bfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2140      	movs	r1, #64	@ 0x40
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 ffbe 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e006      	b.n	8003c98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003cca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cce:	4013      	ands	r3, r2
 8003cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11b      	bne.n	8003d14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8300 	beq.w	800430a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
      }
      return;
 8003d12:	e2fa      	b.n	800430a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8123 	beq.w	8003f64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d22:	4b8d      	ldr	r3, [pc, #564]	@ (8003f58 <HAL_UART_IRQHandler+0x2b8>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f5c <HAL_UART_IRQHandler+0x2bc>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8116 	beq.w	8003f64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d011      	beq.n	8003d68 <HAL_UART_IRQHandler+0xc8>
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d011      	beq.n	8003d98 <HAL_UART_IRQHandler+0xf8>
 8003d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2202      	movs	r2, #2
 8003d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d011      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x128>
 8003da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2204      	movs	r2, #4
 8003db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f043 0202 	orr.w	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003de0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003de4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <HAL_UART_IRQHandler+0x2b8>)
 8003de6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2208      	movs	r2, #8
 8003df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	f043 0208 	orr.w	r2, r3, #8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <HAL_UART_IRQHandler+0x196>
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8266 	beq.w	800430e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d013      	beq.n	8003e76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d054      	beq.n	8003f44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 ff17 	bl	8004cce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b40      	cmp	r3, #64	@ 0x40
 8003eac:	d146      	bne.n	8003f3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ee6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1d9      	bne.n	8003eae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0a:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <HAL_UART_IRQHandler+0x2c0>)
 8003f0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd f9f2 	bl	80012fe <HAL_DMA_Abort_IT>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f32:	e00f      	b.n	8003f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9ff 	bl	8004338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3a:	e00b      	b.n	8003f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9fb 	bl	8004338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	e007      	b.n	8003f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f9f7 	bl	8004338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003f52:	e1dc      	b.n	800430e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	bf00      	nop
    return;
 8003f56:	e1da      	b.n	800430e <HAL_UART_IRQHandler+0x66e>
 8003f58:	10000001 	.word	0x10000001
 8003f5c:	04000120 	.word	0x04000120
 8003f60:	08004d9b 	.word	0x08004d9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 8170 	bne.w	800424e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8169 	beq.w	800424e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8162 	beq.w	800424e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	f040 80d8 	bne.w	8004152 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80af 	beq.w	8004118 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f080 80a7 	bcs.w	8004118 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 8087 	bne.w	80040f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004016:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800401e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800402a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1da      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004056:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800405a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800405e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e1      	bne.n	8004032 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800407e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004092:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004094:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004098:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e3      	bne.n	800406e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e4      	bne.n	80040b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd f8ab 	bl	800124c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004108:	b29b      	uxth	r3, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	b29b      	uxth	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f91b 	bl	800434c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004116:	e0fc      	b.n	8004312 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	429a      	cmp	r2, r3
 8004124:	f040 80f5 	bne.w	8004312 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	f040 80eb 	bne.w	8004312 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8fe 	bl	800434c <HAL_UARTEx_RxEventCallback>
      return;
 8004150:	e0df      	b.n	8004312 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800415e:	b29b      	uxth	r3, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80d1 	beq.w	8004316 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80cc 	beq.w	8004316 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800418c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e4      	bne.n	800417e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	623b      	str	r3, [r7, #32]
   return(result);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e1      	bne.n	80041b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60fb      	str	r3, [r7, #12]
   return(result);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	69b9      	ldr	r1, [r7, #24]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	617b      	str	r3, [r7, #20]
   return(result);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e4      	bne.n	8004204 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f880 	bl	800434c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800424c:	e063      	b.n	8004316 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <HAL_UART_IRQHandler+0x5d8>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800426e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fdcf 	bl	8004e14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004276:	e051      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d014      	beq.n	80042ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d03a      	beq.n	800431a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
    }
    return;
 80042ac:	e035      	b.n	800431a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_UART_IRQHandler+0x62e>
 80042ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fd79 	bl	8004dbe <UART_EndTransmit_IT>
    return;
 80042cc:	e026      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_UART_IRQHandler+0x64e>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fda8 	bl	8004e3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042ec:	e016      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_UART_IRQHandler+0x67c>
 80042fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da0c      	bge.n	800431c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fd90 	bl	8004e28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004308:	e008      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
      return;
 800430a:	bf00      	nop
 800430c:	e006      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
    return;
 800430e:	bf00      	nop
 8004310:	e004      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
      return;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
      return;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_UART_IRQHandler+0x67c>
    return;
 800431a:	bf00      	nop
  }
}
 800431c:	37e8      	adds	r7, #232	@ 0xe8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b08c      	sub	sp, #48	@ 0x30
 800436a:	af00      	add	r7, sp, #0
 800436c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	431a      	orrs	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	431a      	orrs	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4313      	orrs	r3, r2
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4baa      	ldr	r3, [pc, #680]	@ (800463c <UART_SetConfig+0x2d8>)
 8004394:	4013      	ands	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800439c:	430b      	orrs	r3, r1
 800439e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004640 <UART_SetConfig+0x2dc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043cc:	4313      	orrs	r3, r2
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	f023 010f 	bic.w	r1, r3, #15
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a90      	ldr	r2, [pc, #576]	@ (8004644 <UART_SetConfig+0x2e0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d125      	bne.n	8004454 <UART_SetConfig+0xf0>
 8004408:	4b8f      	ldr	r3, [pc, #572]	@ (8004648 <UART_SetConfig+0x2e4>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b03      	cmp	r3, #3
 8004414:	d81a      	bhi.n	800444c <UART_SetConfig+0xe8>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <UART_SetConfig+0xb8>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	0800443d 	.word	0x0800443d
 8004424:	08004435 	.word	0x08004435
 8004428:	08004445 	.word	0x08004445
 800442c:	2301      	movs	r3, #1
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e116      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004434:	2302      	movs	r3, #2
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e112      	b.n	8004662 <UART_SetConfig+0x2fe>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004442:	e10e      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444a:	e10a      	b.n	8004662 <UART_SetConfig+0x2fe>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004452:	e106      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7c      	ldr	r2, [pc, #496]	@ (800464c <UART_SetConfig+0x2e8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d138      	bne.n	80044d0 <UART_SetConfig+0x16c>
 800445e:	4b7a      	ldr	r3, [pc, #488]	@ (8004648 <UART_SetConfig+0x2e4>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d82d      	bhi.n	80044c8 <UART_SetConfig+0x164>
 800446c:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <UART_SetConfig+0x110>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080044c9 	.word	0x080044c9
 800447c:	080044c9 	.word	0x080044c9
 8004480:	080044c9 	.word	0x080044c9
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044c9 	.word	0x080044c9
 800448c:	080044c9 	.word	0x080044c9
 8004490:	080044c9 	.word	0x080044c9
 8004494:	080044b1 	.word	0x080044b1
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044c9 	.word	0x080044c9
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ae:	e0d8      	b.n	8004662 <UART_SetConfig+0x2fe>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b6:	e0d4      	b.n	8004662 <UART_SetConfig+0x2fe>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044be:	e0d0      	b.n	8004662 <UART_SetConfig+0x2fe>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c6:	e0cc      	b.n	8004662 <UART_SetConfig+0x2fe>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ce:	e0c8      	b.n	8004662 <UART_SetConfig+0x2fe>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004650 <UART_SetConfig+0x2ec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d125      	bne.n	8004526 <UART_SetConfig+0x1c2>
 80044da:	4b5b      	ldr	r3, [pc, #364]	@ (8004648 <UART_SetConfig+0x2e4>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044e4:	2b30      	cmp	r3, #48	@ 0x30
 80044e6:	d016      	beq.n	8004516 <UART_SetConfig+0x1b2>
 80044e8:	2b30      	cmp	r3, #48	@ 0x30
 80044ea:	d818      	bhi.n	800451e <UART_SetConfig+0x1ba>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d00a      	beq.n	8004506 <UART_SetConfig+0x1a2>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d814      	bhi.n	800451e <UART_SetConfig+0x1ba>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <UART_SetConfig+0x19a>
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d008      	beq.n	800450e <UART_SetConfig+0x1aa>
 80044fc:	e00f      	b.n	800451e <UART_SetConfig+0x1ba>
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004504:	e0ad      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004506:	2302      	movs	r3, #2
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450c:	e0a9      	b.n	8004662 <UART_SetConfig+0x2fe>
 800450e:	2304      	movs	r3, #4
 8004510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004514:	e0a5      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004516:	2308      	movs	r3, #8
 8004518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451c:	e0a1      	b.n	8004662 <UART_SetConfig+0x2fe>
 800451e:	2310      	movs	r3, #16
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004524:	e09d      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a4a      	ldr	r2, [pc, #296]	@ (8004654 <UART_SetConfig+0x2f0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d125      	bne.n	800457c <UART_SetConfig+0x218>
 8004530:	4b45      	ldr	r3, [pc, #276]	@ (8004648 <UART_SetConfig+0x2e4>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800453a:	2bc0      	cmp	r3, #192	@ 0xc0
 800453c:	d016      	beq.n	800456c <UART_SetConfig+0x208>
 800453e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004540:	d818      	bhi.n	8004574 <UART_SetConfig+0x210>
 8004542:	2b80      	cmp	r3, #128	@ 0x80
 8004544:	d00a      	beq.n	800455c <UART_SetConfig+0x1f8>
 8004546:	2b80      	cmp	r3, #128	@ 0x80
 8004548:	d814      	bhi.n	8004574 <UART_SetConfig+0x210>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <UART_SetConfig+0x1f0>
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d008      	beq.n	8004564 <UART_SetConfig+0x200>
 8004552:	e00f      	b.n	8004574 <UART_SetConfig+0x210>
 8004554:	2300      	movs	r3, #0
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455a:	e082      	b.n	8004662 <UART_SetConfig+0x2fe>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004562:	e07e      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456a:	e07a      	b.n	8004662 <UART_SetConfig+0x2fe>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004572:	e076      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457a:	e072      	b.n	8004662 <UART_SetConfig+0x2fe>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a35      	ldr	r2, [pc, #212]	@ (8004658 <UART_SetConfig+0x2f4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d12a      	bne.n	80045dc <UART_SetConfig+0x278>
 8004586:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <UART_SetConfig+0x2e4>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004594:	d01a      	beq.n	80045cc <UART_SetConfig+0x268>
 8004596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800459a:	d81b      	bhi.n	80045d4 <UART_SetConfig+0x270>
 800459c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a0:	d00c      	beq.n	80045bc <UART_SetConfig+0x258>
 80045a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a6:	d815      	bhi.n	80045d4 <UART_SetConfig+0x270>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <UART_SetConfig+0x250>
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b0:	d008      	beq.n	80045c4 <UART_SetConfig+0x260>
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x270>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ba:	e052      	b.n	8004662 <UART_SetConfig+0x2fe>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c2:	e04e      	b.n	8004662 <UART_SetConfig+0x2fe>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ca:	e04a      	b.n	8004662 <UART_SetConfig+0x2fe>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d2:	e046      	b.n	8004662 <UART_SetConfig+0x2fe>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045da:	e042      	b.n	8004662 <UART_SetConfig+0x2fe>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <UART_SetConfig+0x2dc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d13a      	bne.n	800465c <UART_SetConfig+0x2f8>
 80045e6:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <UART_SetConfig+0x2e4>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f4:	d01a      	beq.n	800462c <UART_SetConfig+0x2c8>
 80045f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045fa:	d81b      	bhi.n	8004634 <UART_SetConfig+0x2d0>
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004600:	d00c      	beq.n	800461c <UART_SetConfig+0x2b8>
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004606:	d815      	bhi.n	8004634 <UART_SetConfig+0x2d0>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <UART_SetConfig+0x2b0>
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004610:	d008      	beq.n	8004624 <UART_SetConfig+0x2c0>
 8004612:	e00f      	b.n	8004634 <UART_SetConfig+0x2d0>
 8004614:	2300      	movs	r3, #0
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461a:	e022      	b.n	8004662 <UART_SetConfig+0x2fe>
 800461c:	2302      	movs	r3, #2
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004622:	e01e      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800462a:	e01a      	b.n	8004662 <UART_SetConfig+0x2fe>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004632:	e016      	b.n	8004662 <UART_SetConfig+0x2fe>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800463a:	e012      	b.n	8004662 <UART_SetConfig+0x2fe>
 800463c:	cfff69f3 	.word	0xcfff69f3
 8004640:	40008000 	.word	0x40008000
 8004644:	40013800 	.word	0x40013800
 8004648:	40021000 	.word	0x40021000
 800464c:	40004400 	.word	0x40004400
 8004650:	40004800 	.word	0x40004800
 8004654:	40004c00 	.word	0x40004c00
 8004658:	40005000 	.word	0x40005000
 800465c:	2310      	movs	r3, #16
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4aae      	ldr	r2, [pc, #696]	@ (8004920 <UART_SetConfig+0x5bc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	f040 8097 	bne.w	800479c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800466e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004672:	2b08      	cmp	r3, #8
 8004674:	d823      	bhi.n	80046be <UART_SetConfig+0x35a>
 8004676:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <UART_SetConfig+0x318>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046bf 	.word	0x080046bf
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046af 	.word	0x080046af
 8004690:	080046bf 	.word	0x080046bf
 8004694:	080046bf 	.word	0x080046bf
 8004698:	080046bf 	.word	0x080046bf
 800469c:	080046b7 	.word	0x080046b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7fe fbe2 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80046a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046a6:	e010      	b.n	80046ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004924 <UART_SetConfig+0x5c0>)
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046ac:	e00d      	b.n	80046ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ae:	f7fe fb6d 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80046b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046b4:	e009      	b.n	80046ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046bc:	e005      	b.n	80046ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8130 	beq.w	8004932 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	4a94      	ldr	r2, [pc, #592]	@ (8004928 <UART_SetConfig+0x5c4>)
 80046d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d305      	bcc.n	8004702 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d903      	bls.n	800470a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004708:	e113      	b.n	8004932 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	2200      	movs	r2, #0
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	60fa      	str	r2, [r7, #12]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	4a84      	ldr	r2, [pc, #528]	@ (8004928 <UART_SetConfig+0x5c4>)
 8004718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800471c:	b29b      	uxth	r3, r3
 800471e:	2200      	movs	r2, #0
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004728:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800472c:	f7fb fdc8 	bl	80002c0 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	020b      	lsls	r3, r1, #8
 8004742:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004746:	0202      	lsls	r2, r0, #8
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	6849      	ldr	r1, [r1, #4]
 800474c:	0849      	lsrs	r1, r1, #1
 800474e:	2000      	movs	r0, #0
 8004750:	460c      	mov	r4, r1
 8004752:	4605      	mov	r5, r0
 8004754:	eb12 0804 	adds.w	r8, r2, r4
 8004758:	eb43 0905 	adc.w	r9, r3, r5
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	469a      	mov	sl, r3
 8004764:	4693      	mov	fp, r2
 8004766:	4652      	mov	r2, sl
 8004768:	465b      	mov	r3, fp
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb fda7 	bl	80002c0 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4613      	mov	r3, r2
 8004778:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004780:	d308      	bcc.n	8004794 <UART_SetConfig+0x430>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004788:	d204      	bcs.n	8004794 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e0ce      	b.n	8004932 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800479a:	e0ca      	b.n	8004932 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a4:	d166      	bne.n	8004874 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d827      	bhi.n	80047fe <UART_SetConfig+0x49a>
 80047ae:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <UART_SetConfig+0x450>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ff 	.word	0x080047ff
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe fb46 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047de:	e014      	b.n	800480a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe fb58 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047e6:	e010      	b.n	800480a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004924 <UART_SetConfig+0x5c0>)
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047ec:	e00d      	b.n	800480a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe facd 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80047f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047f4:	e009      	b.n	800480a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047fc:	e005      	b.n	800480a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8090 	beq.w	8004932 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	4a44      	ldr	r2, [pc, #272]	@ (8004928 <UART_SetConfig+0x5c4>)
 8004818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800481c:	461a      	mov	r2, r3
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	fbb3 f3f2 	udiv	r3, r3, r2
 8004824:	005a      	lsls	r2, r3, #1
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	441a      	add	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	d916      	bls.n	800486c <UART_SetConfig+0x508>
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004844:	d212      	bcs.n	800486c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f023 030f 	bic.w	r3, r3, #15
 800484e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	b29b      	uxth	r3, r3
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	b29a      	uxth	r2, r3
 800485c:	8bfb      	ldrh	r3, [r7, #30]
 800485e:	4313      	orrs	r3, r2
 8004860:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	8bfa      	ldrh	r2, [r7, #30]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	e062      	b.n	8004932 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004872:	e05e      	b.n	8004932 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004874:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004878:	2b08      	cmp	r3, #8
 800487a:	d828      	bhi.n	80048ce <UART_SetConfig+0x56a>
 800487c:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x520>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048cf 	.word	0x080048cf
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
 80048a4:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fe fade 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ae:	e014      	b.n	80048da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fe faf0 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 80048b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048b6:	e010      	b.n	80048da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <UART_SetConfig+0x5c0>)
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048bc:	e00d      	b.n	80048da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fe fa65 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80048c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048c4:	e009      	b.n	80048da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048cc:	e005      	b.n	80048da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048d8:	bf00      	nop
    }

    if (pclk != 0U)
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d028      	beq.n	8004932 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	4a10      	ldr	r2, [pc, #64]	@ (8004928 <UART_SetConfig+0x5c4>)
 80048e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	441a      	add	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b0f      	cmp	r3, #15
 8004908:	d910      	bls.n	800492c <UART_SetConfig+0x5c8>
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004910:	d20c      	bcs.n	800492c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	b29a      	uxth	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60da      	str	r2, [r3, #12]
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x5ce>
 800491e:	bf00      	nop
 8004920:	40008000 	.word	0x40008000
 8004924:	00f42400 	.word	0x00f42400
 8004928:	08009d20 	.word	0x08009d20
      }
      else
      {
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2201      	movs	r2, #1
 8004936:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2201      	movs	r2, #1
 800493e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800494e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004952:	4618      	mov	r0, r3
 8004954:	3730      	adds	r7, #48	@ 0x30
 8004956:	46bd      	mov	sp, r7
 8004958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800495c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01a      	beq.n	8004a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5a:	d10a      	bne.n	8004a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b098      	sub	sp, #96	@ 0x60
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab0:	f7fc fae0 	bl	8001074 <HAL_GetTick>
 8004ab4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d12f      	bne.n	8004b24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f88e 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d022      	beq.n	8004b24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004afe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e063      	b.n	8004bec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d149      	bne.n	8004bc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f857 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03c      	beq.n	8004bc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	623b      	str	r3, [r7, #32]
   return(result);
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e6      	bne.n	8004b4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	617b      	str	r3, [r7, #20]
   return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e012      	b.n	8004bec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3758      	adds	r7, #88	@ 0x58
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	e04f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c0c:	d04b      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc fa31 	bl	8001074 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e04e      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d037      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b80      	cmp	r3, #128	@ 0x80
 8004c3a:	d034      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b40      	cmp	r3, #64	@ 0x40
 8004c40:	d031      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d110      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f838 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2208      	movs	r2, #8
 8004c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e029      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c80:	d111      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f81e 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d0a0      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b095      	sub	sp, #84	@ 0x54
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d118      	bne.n	8004d7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d8e:	bf00      	nop
 8004d90:	3754      	adds	r7, #84	@ 0x54
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fac1 	bl	8004338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b088      	sub	sp, #32
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	613b      	str	r3, [r7, #16]
   return(result);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fa8c 	bl	8004324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e0c:	bf00      	nop
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e027      	b.n	8004eb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2224      	movs	r2, #36	@ 0x24
 8004e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e02d      	b.n	8004f36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2224      	movs	r2, #36	@ 0x24
 8004ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f850 	bl	8004fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e02d      	b.n	8004fb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2224      	movs	r2, #36	@ 0x24
 8004f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f812 	bl	8004fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d108      	bne.n	8004fde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fdc:	e031      	b.n	8005042 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fde:	2308      	movs	r3, #8
 8004fe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	0e5b      	lsrs	r3, r3, #25
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	0f5b      	lsrs	r3, r3, #29
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	7b3a      	ldrb	r2, [r7, #12]
 800500a:	4911      	ldr	r1, [pc, #68]	@ (8005050 <UARTEx_SetNbDataToProcess+0x94>)
 800500c:	5c8a      	ldrb	r2, [r1, r2]
 800500e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005012:	7b3a      	ldrb	r2, [r7, #12]
 8005014:	490f      	ldr	r1, [pc, #60]	@ (8005054 <UARTEx_SetNbDataToProcess+0x98>)
 8005016:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005018:	fb93 f3f2 	sdiv	r3, r3, r2
 800501c:	b29a      	uxth	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	7b7a      	ldrb	r2, [r7, #13]
 8005028:	4909      	ldr	r1, [pc, #36]	@ (8005050 <UARTEx_SetNbDataToProcess+0x94>)
 800502a:	5c8a      	ldrb	r2, [r1, r2]
 800502c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005030:	7b7a      	ldrb	r2, [r7, #13]
 8005032:	4908      	ldr	r1, [pc, #32]	@ (8005054 <UARTEx_SetNbDataToProcess+0x98>)
 8005034:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005036:	fb93 f3f2 	sdiv	r3, r3, r2
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	08009d38 	.word	0x08009d38
 8005054:	08009d40 	.word	0x08009d40

08005058 <__NVIC_SetPriority>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db0a      	blt.n	8005082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	490c      	ldr	r1, [pc, #48]	@ (80050a4 <__NVIC_SetPriority+0x4c>)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	440b      	add	r3, r1
 800507c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005080:	e00a      	b.n	8005098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4908      	ldr	r1, [pc, #32]	@ (80050a8 <__NVIC_SetPriority+0x50>)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3b04      	subs	r3, #4
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	440b      	add	r3, r1
 8005096:	761a      	strb	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000e100 	.word	0xe000e100
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <SysTick_Handler+0x1c>)
 80050b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050b4:	f002 fc70 	bl	8007998 <xTaskGetSchedulerState>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050be:	f003 fb6b 	bl	8008798 <xPortSysTickHandler>
  }
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000e010 	.word	0xe000e010

080050cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050d0:	2100      	movs	r1, #0
 80050d2:	f06f 0004 	mvn.w	r0, #4
 80050d6:	f7ff ffbf 	bl	8005058 <__NVIC_SetPriority>
#endif
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	603b      	str	r3, [r7, #0]
  return(result);
 80050ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050f2:	f06f 0305 	mvn.w	r3, #5
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e00c      	b.n	8005114 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <osKernelInitialize+0x44>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005102:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <osKernelInitialize+0x44>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005108:	2300      	movs	r3, #0
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	e002      	b.n	8005114 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800510e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	200001e8 	.word	0x200001e8

08005128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	603b      	str	r3, [r7, #0]
  return(result);
 8005134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <osKernelStart+0x1a>
    stat = osErrorISR;
 800513a:	f06f 0305 	mvn.w	r3, #5
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	e010      	b.n	8005164 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <osKernelStart+0x48>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d109      	bne.n	800515e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800514a:	f7ff ffbf 	bl	80050cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <osKernelStart+0x48>)
 8005150:	2202      	movs	r2, #2
 8005152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005154:	f001 ffc2 	bl	80070dc <vTaskStartScheduler>
      stat = osOK;
 8005158:	2300      	movs	r3, #0
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e002      	b.n	8005164 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005162:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200001e8 	.word	0x200001e8

08005174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b08e      	sub	sp, #56	@ 0x38
 8005178:	af04      	add	r7, sp, #16
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005184:	f3ef 8305 	mrs	r3, IPSR
 8005188:	617b      	str	r3, [r7, #20]
  return(result);
 800518a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800518c:	2b00      	cmp	r3, #0
 800518e:	d17e      	bne.n	800528e <osThreadNew+0x11a>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d07b      	beq.n	800528e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005196:	2380      	movs	r3, #128	@ 0x80
 8005198:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800519a:	2318      	movs	r3, #24
 800519c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d045      	beq.n	800523a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <osThreadNew+0x48>
        name = attr->name;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <osThreadNew+0x6e>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b38      	cmp	r3, #56	@ 0x38
 80051d4:	d805      	bhi.n	80051e2 <osThreadNew+0x6e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <osThreadNew+0x72>
        return (NULL);
 80051e2:	2300      	movs	r3, #0
 80051e4:	e054      	b.n	8005290 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <osThreadNew+0xa8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b5b      	cmp	r3, #91	@ 0x5b
 8005204:	d90a      	bls.n	800521c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <osThreadNew+0xa8>
        mem = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e010      	b.n	800523e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <osThreadNew+0xca>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <osThreadNew+0xca>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <osThreadNew+0xca>
          mem = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e001      	b.n	800523e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d110      	bne.n	8005266 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800524c:	9202      	str	r2, [sp, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f001 fd62 	bl	8006d24 <xTaskCreateStatic>
 8005260:	4603      	mov	r3, r0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e013      	b.n	800528e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d110      	bne.n	800528e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	b29a      	uxth	r2, r3
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 fdb0 	bl	8006de4 <xTaskCreate>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <osThreadNew+0x11a>
            hTask = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528e:	693b      	ldr	r3, [r7, #16]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	@ 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a0:	f3ef 8305 	mrs	r3, IPSR
 80052a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <osDelay+0x1c>
    stat = osErrorISR;
 80052ac:	f06f 0305 	mvn.w	r3, #5
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e007      	b.n	80052c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fed6 	bl	8007070 <vTaskDelay>
    }
  }

  return (stat);
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b088      	sub	sp, #32
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052da:	f3ef 8305 	mrs	r3, IPSR
 80052de:	60bb      	str	r3, [r7, #8]
  return(result);
 80052e0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d174      	bne.n	80053d0 <osMutexNew+0x102>
    if (attr != NULL) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	e001      	b.n	80052f8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <osMutexNew+0x3a>
      rmtx = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	e001      	b.n	800530c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d15c      	bne.n	80053d0 <osMutexNew+0x102>
      mem = -1;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800531a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d015      	beq.n	800534e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <osMutexNew+0x6a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005330:	d902      	bls.n	8005338 <osMutexNew+0x6a>
          mem = 1;
 8005332:	2301      	movs	r3, #1
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e00c      	b.n	8005352 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <osMutexNew+0x84>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <osMutexNew+0x84>
            mem = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e001      	b.n	8005352 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d112      	bne.n	800537e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	4619      	mov	r1, r3
 8005364:	2004      	movs	r0, #4
 8005366:	f000 fd70 	bl	8005e4a <xQueueCreateMutexStatic>
 800536a:	61f8      	str	r0, [r7, #28]
 800536c:	e016      	b.n	800539c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4619      	mov	r1, r3
 8005374:	2001      	movs	r0, #1
 8005376:	f000 fd68 	bl	8005e4a <xQueueCreateMutexStatic>
 800537a:	61f8      	str	r0, [r7, #28]
 800537c:	e00e      	b.n	800539c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800538a:	2004      	movs	r0, #4
 800538c:	f000 fd45 	bl	8005e1a <xQueueCreateMutex>
 8005390:	61f8      	str	r0, [r7, #28]
 8005392:	e003      	b.n	800539c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005394:	2001      	movs	r0, #1
 8005396:	f000 fd40 	bl	8005e1a <xQueueCreateMutex>
 800539a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <osMutexNew+0xee>
        if (attr != NULL) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <osMutexNew+0xe2>
          name = attr->name;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e001      	b.n	80053b4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	69f8      	ldr	r0, [r7, #28]
 80053b8:	f001 fc2c 	bl	8006c14 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <osMutexNew+0x102>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80053d0:	69fb      	ldr	r3, [r7, #28]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053f8:	f3ef 8305 	mrs	r3, IPSR
 80053fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80053fe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005404:	f06f 0305 	mvn.w	r3, #5
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e02c      	b.n	8005466 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005412:	f06f 0303 	mvn.w	r3, #3
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e025      	b.n	8005466 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d011      	beq.n	8005444 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6938      	ldr	r0, [r7, #16]
 8005424:	f000 fd61 	bl	8005eea <xQueueTakeMutexRecursive>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d01b      	beq.n	8005466 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005434:	f06f 0301 	mvn.w	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e014      	b.n	8005466 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800543c:	f06f 0302 	mvn.w	r3, #2
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e010      	b.n	8005466 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f001 f906 	bl	8006658 <xQueueSemaphoreTake>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d009      	beq.n	8005466 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005458:	f06f 0301 	mvn.w	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e002      	b.n	8005466 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005460:	f06f 0302 	mvn.w	r3, #2
 8005464:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548c:	f3ef 8305 	mrs	r3, IPSR
 8005490:	60bb      	str	r3, [r7, #8]
  return(result);
 8005492:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005498:	f06f 0305 	mvn.w	r3, #5
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e01f      	b.n	80054e0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80054a6:	f06f 0303 	mvn.w	r3, #3
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e018      	b.n	80054e0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80054b4:	6938      	ldr	r0, [r7, #16]
 80054b6:	f000 fce3 	bl	8005e80 <xQueueGiveMutexRecursive>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d00f      	beq.n	80054e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80054c0:	f06f 0302 	mvn.w	r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e00b      	b.n	80054e0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f000 fdb0 	bl	8006034 <xQueueGenericSend>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d002      	beq.n	80054e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80054da:	f06f 0302 	mvn.w	r3, #2
 80054de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80054e0:	697b      	ldr	r3, [r7, #20]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b08a      	sub	sp, #40	@ 0x28
 80054ee:	af02      	add	r7, sp, #8
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fa:	f3ef 8305 	mrs	r3, IPSR
 80054fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005500:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005502:	2b00      	cmp	r3, #0
 8005504:	d175      	bne.n	80055f2 <osSemaphoreNew+0x108>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d072      	beq.n	80055f2 <osSemaphoreNew+0x108>
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	429a      	cmp	r2, r3
 8005512:	d86e      	bhi.n	80055f2 <osSemaphoreNew+0x108>
    mem = -1;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005518:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <osSemaphoreNew+0x4c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b4f      	cmp	r3, #79	@ 0x4f
 800552e:	d902      	bls.n	8005536 <osSemaphoreNew+0x4c>
        mem = 1;
 8005530:	2301      	movs	r3, #1
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e00c      	b.n	8005550 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <osSemaphoreNew+0x66>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <osSemaphoreNew+0x66>
          mem = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e001      	b.n	8005550 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005556:	d04c      	beq.n	80055f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d128      	bne.n	80055b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10a      	bne.n	800557a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2203      	movs	r2, #3
 800556a:	9200      	str	r2, [sp, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	2001      	movs	r0, #1
 8005572:	f000 fb5d 	bl	8005c30 <xQueueGenericCreateStatic>
 8005576:	61f8      	str	r0, [r7, #28]
 8005578:	e005      	b.n	8005586 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800557a:	2203      	movs	r2, #3
 800557c:	2100      	movs	r1, #0
 800557e:	2001      	movs	r0, #1
 8005580:	f000 fbd3 	bl	8005d2a <xQueueGenericCreate>
 8005584:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d022      	beq.n	80055d2 <osSemaphoreNew+0xe8>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01f      	beq.n	80055d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	69f8      	ldr	r0, [r7, #28]
 800559a:	f000 fd4b 	bl	8006034 <xQueueGenericSend>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d016      	beq.n	80055d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80055a4:	69f8      	ldr	r0, [r7, #28]
 80055a6:	f001 f9e9 	bl	800697c <vQueueDelete>
            hSemaphore = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	e010      	b.n	80055d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fcca 	bl	8005f58 <xQueueCreateCountingSemaphoreStatic>
 80055c4:	61f8      	str	r0, [r7, #28]
 80055c6:	e004      	b.n	80055d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fcfd 	bl	8005fca <xQueueCreateCountingSemaphore>
 80055d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00c      	beq.n	80055f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e001      	b.n	80055ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055ea:	6979      	ldr	r1, [r7, #20]
 80055ec:	69f8      	ldr	r0, [r7, #28]
 80055ee:	f001 fb11 	bl	8006c14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005614:	f06f 0303 	mvn.w	r3, #3
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e039      	b.n	8005690 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800561c:	f3ef 8305 	mrs	r3, IPSR
 8005620:	60fb      	str	r3, [r7, #12]
  return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005624:	2b00      	cmp	r3, #0
 8005626:	d022      	beq.n	800566e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800562e:	f06f 0303 	mvn.w	r3, #3
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e02c      	b.n	8005690 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	461a      	mov	r2, r3
 8005640:	2100      	movs	r1, #0
 8005642:	6938      	ldr	r0, [r7, #16]
 8005644:	f001 f918 	bl	8006878 <xQueueReceiveFromISR>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d003      	beq.n	8005656 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800564e:	f06f 0302 	mvn.w	r3, #2
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e01c      	b.n	8005690 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d019      	beq.n	8005690 <osSemaphoreAcquire+0x94>
 800565c:	4b0f      	ldr	r3, [pc, #60]	@ (800569c <osSemaphoreAcquire+0xa0>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	e010      	b.n	8005690 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f000 fff1 	bl	8006658 <xQueueSemaphoreTake>
 8005676:	4603      	mov	r3, r0
 8005678:	2b01      	cmp	r3, #1
 800567a:	d009      	beq.n	8005690 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005682:	f06f 0301 	mvn.w	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e002      	b.n	8005690 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800568a:	f06f 0302 	mvn.w	r3, #2
 800568e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005690:	697b      	ldr	r3, [r7, #20]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80056b6:	f06f 0303 	mvn.w	r3, #3
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e02c      	b.n	8005718 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056be:	f3ef 8305 	mrs	r3, IPSR
 80056c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01a      	beq.n	8005700 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056ce:	f107 0308 	add.w	r3, r7, #8
 80056d2:	4619      	mov	r1, r3
 80056d4:	6938      	ldr	r0, [r7, #16]
 80056d6:	f000 fe4d 	bl	8006374 <xQueueGiveFromISR>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d003      	beq.n	80056e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80056e0:	f06f 0302 	mvn.w	r3, #2
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e017      	b.n	8005718 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d014      	beq.n	8005718 <osSemaphoreRelease+0x78>
 80056ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <osSemaphoreRelease+0x84>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	e00b      	b.n	8005718 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005700:	2300      	movs	r3, #0
 8005702:	2200      	movs	r2, #0
 8005704:	2100      	movs	r1, #0
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f000 fc94 	bl	8006034 <xQueueGenericSend>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d002      	beq.n	8005718 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005712:	f06f 0302 	mvn.w	r3, #2
 8005716:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005718:	697b      	ldr	r3, [r7, #20]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	@ 0x28
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005738:	f3ef 8305 	mrs	r3, IPSR
 800573c:	613b      	str	r3, [r7, #16]
  return(result);
 800573e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005740:	2b00      	cmp	r3, #0
 8005742:	d15f      	bne.n	8005804 <osMessageQueueNew+0xdc>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d05c      	beq.n	8005804 <osMessageQueueNew+0xdc>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d059      	beq.n	8005804 <osMessageQueueNew+0xdc>
    mem = -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005754:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d029      	beq.n	80057b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <osMessageQueueNew+0x62>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b4f      	cmp	r3, #79	@ 0x4f
 800576a:	d90e      	bls.n	800578a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <osMessageQueueNew+0x62>
        mem = 1;
 8005784:	2301      	movs	r3, #1
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e014      	b.n	80057b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <osMessageQueueNew+0x8c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e001      	b.n	80057b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10b      	bne.n	80057d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2100      	movs	r1, #0
 80057c4:	9100      	str	r1, [sp, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fa31 	bl	8005c30 <xQueueGenericCreateStatic>
 80057ce:	61f8      	str	r0, [r7, #28]
 80057d0:	e008      	b.n	80057e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80057d8:	2200      	movs	r2, #0
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 faa4 	bl	8005d2a <xQueueGenericCreate>
 80057e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e001      	b.n	80057fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69f8      	ldr	r0, [r7, #28]
 8005800:	f001 fa08 	bl	8006c14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005804:	69fb      	ldr	r3, [r7, #28]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005828:	f3ef 8305 	mrs	r3, IPSR
 800582c:	617b      	str	r3, [r7, #20]
  return(result);
 800582e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005830:	2b00      	cmp	r3, #0
 8005832:	d028      	beq.n	8005886 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <osMessageQueuePut+0x36>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <osMessageQueuePut+0x36>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005846:	f06f 0303 	mvn.w	r3, #3
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e038      	b.n	80058c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005852:	f107 0210 	add.w	r2, r7, #16
 8005856:	2300      	movs	r3, #0
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	69b8      	ldr	r0, [r7, #24]
 800585c:	f000 fcec 	bl	8006238 <xQueueGenericSendFromISR>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d003      	beq.n	800586e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005866:	f06f 0302 	mvn.w	r3, #2
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e028      	b.n	80058c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d025      	beq.n	80058c0 <osMessageQueuePut+0xb0>
 8005874:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <osMessageQueuePut+0xbc>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	e01c      	b.n	80058c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <osMessageQueuePut+0x82>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005892:	f06f 0303 	mvn.w	r3, #3
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e012      	b.n	80058c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800589a:	2300      	movs	r3, #0
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	69b8      	ldr	r0, [r7, #24]
 80058a2:	f000 fbc7 	bl	8006034 <xQueueGenericSend>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d009      	beq.n	80058c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80058b2:	f06f 0301 	mvn.w	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	e002      	b.n	80058c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80058ba:	f06f 0302 	mvn.w	r3, #2
 80058be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80058c0:	69fb      	ldr	r3, [r7, #28]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e6:	f3ef 8305 	mrs	r3, IPSR
 80058ea:	617b      	str	r3, [r7, #20]
  return(result);
 80058ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d028      	beq.n	8005944 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <osMessageQueueGet+0x34>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <osMessageQueueGet+0x34>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005904:	f06f 0303 	mvn.w	r3, #3
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e037      	b.n	800597c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	461a      	mov	r2, r3
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	69b8      	ldr	r0, [r7, #24]
 800591a:	f000 ffad 	bl	8006878 <xQueueReceiveFromISR>
 800591e:	4603      	mov	r3, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	d003      	beq.n	800592c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005924:	f06f 0302 	mvn.w	r3, #2
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e027      	b.n	800597c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d024      	beq.n	800597c <osMessageQueueGet+0xac>
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <osMessageQueueGet+0xb8>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e01b      	b.n	800597c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <osMessageQueueGet+0x80>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005950:	f06f 0303 	mvn.w	r3, #3
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	e011      	b.n	800597c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	69b8      	ldr	r0, [r7, #24]
 800595e:	f000 fd99 	bl	8006494 <xQueueReceive>
 8005962:	4603      	mov	r3, r0
 8005964:	2b01      	cmp	r3, #1
 8005966:	d009      	beq.n	800597c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800596e:	f06f 0301 	mvn.w	r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e002      	b.n	800597c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005976:	f06f 0302 	mvn.w	r3, #2
 800597a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800597c:	69fb      	ldr	r3, [r7, #28]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a07      	ldr	r2, [pc, #28]	@ (80059b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800599c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4a06      	ldr	r2, [pc, #24]	@ (80059bc <vApplicationGetIdleTaskMemory+0x30>)
 80059a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2280      	movs	r2, #128	@ 0x80
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200001ec 	.word	0x200001ec
 80059bc:	20000248 	.word	0x20000248

080059c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a07      	ldr	r2, [pc, #28]	@ (80059ec <vApplicationGetTimerTaskMemory+0x2c>)
 80059d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4a06      	ldr	r2, [pc, #24]	@ (80059f0 <vApplicationGetTimerTaskMemory+0x30>)
 80059d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059de:	601a      	str	r2, [r3, #0]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000448 	.word	0x20000448
 80059f0:	200004a4 	.word	0x200004a4

080059f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f103 0208 	add.w	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f103 0208 	add.w	r2, r3, #8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f103 0208 	add.w	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aac:	d103      	bne.n	8005ab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e00c      	b.n	8005ad0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e002      	b.n	8005ac4 <vListInsert+0x2e>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d2f6      	bcs.n	8005abe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6892      	ldr	r2, [r2, #8]
 8005b1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6852      	ldr	r2, [r2, #4]
 8005b28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d103      	bne.n	8005b3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	1e5a      	subs	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b88:	f002 fd76 	bl	8008678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	441a      	add	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	22ff      	movs	r2, #255	@ 0xff
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d114      	bne.n	8005c08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01a      	beq.n	8005c1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3310      	adds	r3, #16
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fd04 	bl	80075f8 <xTaskRemoveFromEventList>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d012      	beq.n	8005c1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <xQueueGenericReset+0xd0>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e009      	b.n	8005c1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3310      	adds	r3, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fef1 	bl	80059f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3324      	adds	r3, #36	@ 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff feec 	bl	80059f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c1c:	f002 fd5e 	bl	80086dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c20:	2301      	movs	r3, #1
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08e      	sub	sp, #56	@ 0x38
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10b      	bne.n	8005c5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <xQueueGenericCreateStatic+0x56>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <xQueueGenericCreateStatic+0x5a>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericCreateStatic+0x5c>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <xQueueGenericCreateStatic+0x84>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xQueueGenericCreateStatic+0x88>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <xQueueGenericCreateStatic+0x8a>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	61fb      	str	r3, [r7, #28]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cd6:	2350      	movs	r3, #80	@ 0x50
 8005cd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b50      	cmp	r3, #80	@ 0x50
 8005cde:	d00b      	beq.n	8005cf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	61bb      	str	r3, [r7, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f840 	bl	8005da0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3730      	adds	r7, #48	@ 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	@ 0x28
 8005d2e:	af02      	add	r7, sp, #8
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	4613      	mov	r3, r2
 8005d36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	613b      	str	r3, [r7, #16]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	fb02 f303 	mul.w	r3, r2, r3
 8005d5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3350      	adds	r3, #80	@ 0x50
 8005d64:	4618      	mov	r0, r3
 8005d66:	f002 fda9 	bl	80088bc <pvPortMalloc>
 8005d6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3350      	adds	r3, #80	@ 0x50
 8005d7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d84:	79fa      	ldrb	r2, [r7, #7]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f805 	bl	8005da0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d96:	69bb      	ldr	r3, [r7, #24]
	}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dce:	2101      	movs	r1, #1
 8005dd0:	69b8      	ldr	r0, [r7, #24]
 8005dd2:	f7ff fec3 	bl	8005b5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e06:	2300      	movs	r3, #0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f911 	bl	8006034 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	4603      	mov	r3, r0
 8005e22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6939      	ldr	r1, [r7, #16]
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f7ff ff79 	bl	8005d2a <xQueueGenericCreate>
 8005e38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ffd3 	bl	8005de6 <prvInitialiseMutex>

		return xNewQueue;
 8005e40:	68fb      	ldr	r3, [r7, #12]
	}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b088      	sub	sp, #32
 8005e4e:	af02      	add	r7, sp, #8
 8005e50:	4603      	mov	r3, r0
 8005e52:	6039      	str	r1, [r7, #0]
 8005e54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e56:	2301      	movs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2200      	movs	r2, #0
 8005e66:	6939      	ldr	r1, [r7, #16]
 8005e68:	6978      	ldr	r0, [r7, #20]
 8005e6a:	f7ff fee1 	bl	8005c30 <xQueueGenericCreateStatic>
 8005e6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff ffb8 	bl	8005de6 <prvInitialiseMutex>

		return xNewQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
	}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	689c      	ldr	r4, [r3, #8]
 8005eae:	f001 fd63 	bl	8007978 <xTaskGetCurrentTaskHandle>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d111      	bne.n	8005edc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005eca:	2300      	movs	r3, #0
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	6938      	ldr	r0, [r7, #16]
 8005ed2:	f000 f8af 	bl	8006034 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e001      	b.n	8005ee0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
	}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd90      	pop	{r4, r7, pc}

08005eea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005eea:	b590      	push	{r4, r7, lr}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	689c      	ldr	r4, [r3, #8]
 8005f1a:	f001 fd2d 	bl	8007978 <xTaskGetCurrentTaskHandle>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	429c      	cmp	r4, r3
 8005f22:	d107      	bne.n	8005f34 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e00c      	b.n	8005f4e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6938      	ldr	r0, [r7, #16]
 8005f38:	f000 fb8e 	bl	8006658 <xQueueSemaphoreTake>
 8005f3c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005f4e:	697b      	ldr	r3, [r7, #20]
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd90      	pop	{r4, r7, pc}

08005f58 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	@ 0x28
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61bb      	str	r3, [r7, #24]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d90b      	bls.n	8005fa2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	617b      	str	r3, [r7, #20]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff fe3f 	bl	8005c30 <xQueueGenericCreateStatic>
 8005fb2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
	}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	613b      	str	r3, [r7, #16]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d90b      	bls.n	8006012 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60fb      	str	r3, [r7, #12]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006012:	2202      	movs	r2, #2
 8006014:	2100      	movs	r1, #0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fe87 	bl	8005d2a <xQueueGenericCreate>
 800601c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800602a:	697b      	ldr	r3, [r7, #20]
	}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	@ 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <xQueueGenericSend+0x34>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	e7fd      	b.n	8006064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueGenericSend+0x42>
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueGenericSend+0x46>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericSend+0x48>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xQueueGenericSend+0x64>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSend+0x72>
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSend+0x76>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSend+0x78>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <xQueueGenericSend+0x94>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c8:	f001 fc66 	bl	8007998 <xTaskGetSchedulerState>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <xQueueGenericSend+0xa4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <xQueueGenericSend+0xa8>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <xQueueGenericSend+0xaa>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <xQueueGenericSend+0xc6>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	61fb      	str	r3, [r7, #28]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060fa:	f002 fabd 	bl	8008678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <xQueueGenericSend+0xdc>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d129      	bne.n	8006164 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006116:	f000 fc6d 	bl	80069f4 <prvCopyDataToQueue>
 800611a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	3324      	adds	r3, #36	@ 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fa65 	bl	80075f8 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d013      	beq.n	800615c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006134:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <xQueueGenericSend+0x200>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	e00a      	b.n	800615c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800614c:	4b39      	ldr	r3, [pc, #228]	@ (8006234 <xQueueGenericSend+0x200>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800615c:	f002 fabe 	bl	80086dc <vPortExitCritical>
				return pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	e063      	b.n	800622c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616a:	f002 fab7 	bl	80086dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800616e:	2300      	movs	r3, #0
 8006170:	e05c      	b.n	800622c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fa9f 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006186:	f002 faa9 	bl	80086dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618a:	f001 f80f 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618e:	f002 fa73 	bl	8008678 <vPortEnterCritical>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006198:	b25b      	sxtb	r3, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619e:	d103      	bne.n	80061a8 <xQueueGenericSend+0x174>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x18a>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061be:	f002 fa8d 	bl	80086dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c2:	1d3a      	adds	r2, r7, #4
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fa8e 	bl	80076ec <xTaskCheckForTimeOut>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d124      	bne.n	8006220 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061d8:	f000 fd04 	bl	8006be4 <prvIsQueueFull>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d018      	beq.n	8006214 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3310      	adds	r3, #16
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f9b2 	bl	8007554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061f2:	f000 fc8f 	bl	8006b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061f6:	f000 ffe7 	bl	80071c8 <xTaskResumeAll>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f af7c 	bne.w	80060fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006202:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <xQueueGenericSend+0x200>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e772      	b.n	80060fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006216:	f000 fc7d 	bl	8006b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 ffd5 	bl	80071c8 <xTaskResumeAll>
 800621e:	e76c      	b.n	80060fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006222:	f000 fc77 	bl	8006b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 ffcf 	bl	80071c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800622a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800622c:	4618      	mov	r0, r3
 800622e:	3738      	adds	r7, #56	@ 0x38
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b090      	sub	sp, #64	@ 0x40
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSendFromISR+0x3e>
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <xQueueGenericSendFromISR+0x42>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <xQueueGenericSendFromISR+0x44>
 800627a:	2300      	movs	r3, #0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSendFromISR+0x6e>
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSendFromISR+0x72>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSendFromISR+0x74>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c8:	f002 fab6 	bl	8008838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062cc:	f3ef 8211 	mrs	r2, BASEPRI
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61fa      	str	r2, [r7, #28]
 80062e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <xQueueGenericSendFromISR+0xc2>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d12f      	bne.n	800635a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006310:	f000 fb70 	bl	80069f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006314:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800631c:	d112      	bne.n	8006344 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006328:	3324      	adds	r3, #36	@ 0x24
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f964 	bl	80075f8 <xTaskRemoveFromEventList>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e007      	b.n	8006354 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006348:	3301      	adds	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	b25a      	sxtb	r2, r3
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006354:	2301      	movs	r3, #1
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006358:	e001      	b.n	800635e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800635a:	2300      	movs	r3, #0
 800635c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800635e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006360:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006368:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800636a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800636c:	4618      	mov	r0, r3
 800636e:	3740      	adds	r7, #64	@ 0x40
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08e      	sub	sp, #56	@ 0x38
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	623b      	str	r3, [r7, #32]
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61fb      	str	r3, [r7, #28]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <xQueueGiveFromISR+0x5c>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueGiveFromISR+0x60>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueGiveFromISR+0x62>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f2:	f002 fa21 	bl	8008838 <vPortValidateInterruptPriority>
	__asm volatile
 80063f6:	f3ef 8211 	mrs	r2, BASEPRI
 80063fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	617a      	str	r2, [r7, #20]
 800640c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800640e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006410:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800641e:	429a      	cmp	r2, r3
 8006420:	d22b      	bcs.n	800647a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006434:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800643c:	d112      	bne.n	8006464 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	3324      	adds	r3, #36	@ 0x24
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f8d4 	bl	80075f8 <xTaskRemoveFromEventList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e007      	b.n	8006474 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006468:	3301      	adds	r3, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	b25a      	sxtb	r2, r3
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006474:	2301      	movs	r3, #1
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
 8006478:	e001      	b.n	800647e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800647a:	2300      	movs	r3, #0
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f383 8811 	msr	BASEPRI, r3
}
 8006488:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800648a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800648c:	4618      	mov	r0, r3
 800648e:	3738      	adds	r7, #56	@ 0x38
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	@ 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <xQueueReceive+0x32>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	623b      	str	r3, [r7, #32]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <xQueueReceive+0x40>
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <xQueueReceive+0x44>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <xQueueReceive+0x46>
 80064d8:	2300      	movs	r3, #0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <xQueueReceive+0x62>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61fb      	str	r3, [r7, #28]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064f6:	f001 fa4f 	bl	8007998 <xTaskGetSchedulerState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <xQueueReceive+0x72>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <xQueueReceive+0x76>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueReceive+0x78>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xQueueReceive+0x94>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61bb      	str	r3, [r7, #24]
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006528:	f002 f8a6 	bl	8008678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01f      	beq.n	8006578 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800653c:	f000 fac4 	bl	8006ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1e5a      	subs	r2, r3, #1
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	3310      	adds	r3, #16
 8006554:	4618      	mov	r0, r3
 8006556:	f001 f84f 	bl	80075f8 <xTaskRemoveFromEventList>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006560:	4b3c      	ldr	r3, [pc, #240]	@ (8006654 <xQueueReceive+0x1c0>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006570:	f002 f8b4 	bl	80086dc <vPortExitCritical>
				return pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	e069      	b.n	800664c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800657e:	f002 f8ad 	bl	80086dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006582:	2300      	movs	r3, #0
 8006584:	e062      	b.n	800664c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f001 f895 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800659a:	f002 f89f 	bl	80086dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800659e:	f000 fe05 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065a2:	f002 f869 	bl	8008678 <vPortEnterCritical>
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065b2:	d103      	bne.n	80065bc <xQueueReceive+0x128>
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c8:	d103      	bne.n	80065d2 <xQueueReceive+0x13e>
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065d2:	f002 f883 	bl	80086dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d6:	1d3a      	adds	r2, r7, #4
 80065d8:	f107 0310 	add.w	r3, r7, #16
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f884 	bl	80076ec <xTaskCheckForTimeOut>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d123      	bne.n	8006632 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ec:	f000 fae4 	bl	8006bb8 <prvIsQueueEmpty>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	3324      	adds	r3, #36	@ 0x24
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4611      	mov	r1, r2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 ffa8 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006606:	f000 fa85 	bl	8006b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800660a:	f000 fddd 	bl	80071c8 <xTaskResumeAll>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d189      	bne.n	8006528 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006614:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <xQueueReceive+0x1c0>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	e780      	b.n	8006528 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006628:	f000 fa74 	bl	8006b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800662c:	f000 fdcc 	bl	80071c8 <xTaskResumeAll>
 8006630:	e77a      	b.n	8006528 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006634:	f000 fa6e 	bl	8006b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006638:	f000 fdc6 	bl	80071c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800663c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800663e:	f000 fabb 	bl	8006bb8 <prvIsQueueEmpty>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	f43f af6f 	beq.w	8006528 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800664a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800664c:	4618      	mov	r0, r3
 800664e:	3730      	adds	r7, #48	@ 0x30
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	@ 0x38
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	623b      	str	r3, [r7, #32]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61fb      	str	r3, [r7, #28]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ac:	f001 f974 	bl	8007998 <xTaskGetSchedulerState>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <xQueueSemaphoreTake+0x64>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <xQueueSemaphoreTake+0x68>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <xQueueSemaphoreTake+0x6a>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	61bb      	str	r3, [r7, #24]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066de:	f001 ffcb 	bl	8008678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d024      	beq.n	8006738 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	1e5a      	subs	r2, r3, #1
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066fe:	f001 fac5 	bl	8007c8c <pvTaskIncrementMutexHeldCount>
 8006702:	4602      	mov	r2, r0
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00f      	beq.n	8006730 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f000 ff6f 	bl	80075f8 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006720:	4b54      	ldr	r3, [pc, #336]	@ (8006874 <xQueueSemaphoreTake+0x21c>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006730:	f001 ffd4 	bl	80086dc <vPortExitCritical>
				return pdPASS;
 8006734:	2301      	movs	r3, #1
 8006736:	e098      	b.n	800686a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d112      	bne.n	8006764 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	617b      	str	r3, [r7, #20]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800675c:	f001 ffbe 	bl	80086dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
 8006762:	e082      	b.n	800686a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676a:	f107 030c 	add.w	r3, r7, #12
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ffa6 	bl	80076c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006778:	f001 ffb0 	bl	80086dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800677c:	f000 fd16 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006780:	f001 ff7a 	bl	8008678 <vPortEnterCritical>
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006790:	d103      	bne.n	800679a <xQueueSemaphoreTake+0x142>
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067a6:	d103      	bne.n	80067b0 <xQueueSemaphoreTake+0x158>
 80067a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067b0:	f001 ff94 	bl	80086dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b4:	463a      	mov	r2, r7
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff95 	bl	80076ec <xTaskCheckForTimeOut>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d132      	bne.n	800682e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067ca:	f000 f9f5 	bl	8006bb8 <prvIsQueueEmpty>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d026      	beq.n	8006822 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80067dc:	f001 ff4c 	bl	8008678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f8f5 	bl	80079d4 <xTaskPriorityInherit>
 80067ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80067ec:	f001 ff76 	bl	80086dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	3324      	adds	r3, #36	@ 0x24
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 feab 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006800:	f000 f988 	bl	8006b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006804:	f000 fce0 	bl	80071c8 <xTaskResumeAll>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f47f af67 	bne.w	80066de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006810:	4b18      	ldr	r3, [pc, #96]	@ (8006874 <xQueueSemaphoreTake+0x21c>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	e75d      	b.n	80066de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006824:	f000 f976 	bl	8006b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006828:	f000 fcce 	bl	80071c8 <xTaskResumeAll>
 800682c:	e757      	b.n	80066de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800682e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006830:	f000 f970 	bl	8006b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006834:	f000 fcc8 	bl	80071c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006838:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800683a:	f000 f9bd 	bl	8006bb8 <prvIsQueueEmpty>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f43f af4c 	beq.w	80066de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00d      	beq.n	8006868 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800684c:	f001 ff14 	bl	8008678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006852:	f000 f8b7 	bl	80069c4 <prvGetDisinheritPriorityAfterTimeout>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f990 	bl	8007b84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006864:	f001 ff3a 	bl	80086dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800686a:	4618      	mov	r0, r3
 800686c:	3738      	adds	r7, #56	@ 0x38
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	@ 0x38
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	623b      	str	r3, [r7, #32]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <xQueueReceiveFromISR+0x3c>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <xQueueReceiveFromISR+0x40>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <xQueueReceiveFromISR+0x42>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	61fb      	str	r3, [r7, #28]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068d6:	f001 ffaf 	bl	8008838 <vPortValidateInterruptPriority>
	__asm volatile
 80068da:	f3ef 8211 	mrs	r2, BASEPRI
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	61ba      	str	r2, [r7, #24]
 80068f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d02f      	beq.n	8006962 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006910:	f000 f8da 	bl	8006ac8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	1e5a      	subs	r2, r3, #1
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800691c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006924:	d112      	bne.n	800694c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	3310      	adds	r3, #16
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fe60 	bl	80075f8 <xTaskRemoveFromEventList>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e007      	b.n	800695c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800694c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006950:	3301      	adds	r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	b25a      	sxtb	r2, r3
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800695c:	2301      	movs	r3, #1
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006960:	e001      	b.n	8006966 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
 8006966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006968:	613b      	str	r3, [r7, #16]
	__asm volatile
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f383 8811 	msr	BASEPRI, r3
}
 8006970:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006974:	4618      	mov	r0, r3
 8006976:	3738      	adds	r7, #56	@ 0x38
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <vQueueDelete+0x2a>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60bb      	str	r3, [r7, #8]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f95e 	bl	8006c68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d102      	bne.n	80069bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f002 f84e 	bl	8008a58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e001      	b.n	80069e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069e6:	68fb      	ldr	r3, [r7, #12]
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d14d      	bne.n	8006ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f840 	bl	8007aa4 <xTaskPriorityDisinherit>
 8006a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	e043      	b.n	8006ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d119      	bne.n	8006a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6858      	ldr	r0, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	f002 fbaf 	bl	80091a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	441a      	add	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d32b      	bcc.n	8006ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	e026      	b.n	8006ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68d8      	ldr	r0, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a70:	461a      	mov	r2, r3
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	f002 fb95 	bl	80091a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	425b      	negs	r3, r3
 8006a82:	441a      	add	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d207      	bcs.n	8006aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	441a      	add	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d105      	bne.n	8006ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006abe:	697b      	ldr	r3, [r7, #20]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	441a      	add	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d303      	bcc.n	8006afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68d9      	ldr	r1, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b04:	461a      	mov	r2, r3
 8006b06:	6838      	ldr	r0, [r7, #0]
 8006b08:	f002 fb4b 	bl	80091a2 <memcpy>
	}
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b1c:	f001 fdac 	bl	8008678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b28:	e011      	b.n	8006b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d012      	beq.n	8006b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3324      	adds	r3, #36	@ 0x24
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fd5e 	bl	80075f8 <xTaskRemoveFromEventList>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b42:	f000 fe37 	bl	80077b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dce9      	bgt.n	8006b2a <prvUnlockQueue+0x16>
 8006b56:	e000      	b.n	8006b5a <prvUnlockQueue+0x46>
					break;
 8006b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	22ff      	movs	r2, #255	@ 0xff
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b62:	f001 fdbb 	bl	80086dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b66:	f001 fd87 	bl	8008678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b72:	e011      	b.n	8006b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3310      	adds	r3, #16
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fd39 	bl	80075f8 <xTaskRemoveFromEventList>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b8c:	f000 fe12 	bl	80077b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dce9      	bgt.n	8006b74 <prvUnlockQueue+0x60>
 8006ba0:	e000      	b.n	8006ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	22ff      	movs	r2, #255	@ 0xff
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006bac:	f001 fd96 	bl	80086dc <vPortExitCritical>
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bc0:	f001 fd5a 	bl	8008678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e001      	b.n	8006bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bd6:	f001 fd81 	bl	80086dc <vPortExitCritical>

	return xReturn;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bec:	f001 fd44 	bl	8008678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d102      	bne.n	8006c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e001      	b.n	8006c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c06:	f001 fd69 	bl	80086dc <vPortExitCritical>

	return xReturn;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e014      	b.n	8006c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c24:	4a0f      	ldr	r2, [pc, #60]	@ (8006c64 <vQueueAddToRegistry+0x50>)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c30:	490c      	ldr	r1, [pc, #48]	@ (8006c64 <vQueueAddToRegistry+0x50>)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c64 <vQueueAddToRegistry+0x50>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c46:	e006      	b.n	8006c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b07      	cmp	r3, #7
 8006c52:	d9e7      	bls.n	8006c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	200008a4 	.word	0x200008a4

08006c68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e016      	b.n	8006ca4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c76:	4a10      	ldr	r2, [pc, #64]	@ (8006cb8 <vQueueUnregisterQueue+0x50>)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d10b      	bne.n	8006c9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c86:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb8 <vQueueUnregisterQueue+0x50>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c90:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <vQueueUnregisterQueue+0x50>)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	4413      	add	r3, r2
 8006c98:	2200      	movs	r2, #0
 8006c9a:	605a      	str	r2, [r3, #4]
				break;
 8006c9c:	e006      	b.n	8006cac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d9e5      	bls.n	8006c76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	200008a4 	.word	0x200008a4

08006cbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ccc:	f001 fcd4 	bl	8008678 <vPortEnterCritical>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cdc:	d103      	bne.n	8006ce6 <vQueueWaitForMessageRestricted+0x2a>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cf2:	d103      	bne.n	8006cfc <vQueueWaitForMessageRestricted+0x40>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cfc:	f001 fcee 	bl	80086dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	3324      	adds	r3, #36	@ 0x24
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fc45 	bl	80075a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d16:	6978      	ldr	r0, [r7, #20]
 8006d18:	f7ff fefc 	bl	8006b14 <prvUnlockQueue>
	}
 8006d1c:	bf00      	nop
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08e      	sub	sp, #56	@ 0x38
 8006d28:	af04      	add	r7, sp, #16
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	623b      	str	r3, [r7, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	61fb      	str	r3, [r7, #28]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d6e:	235c      	movs	r3, #92	@ 0x5c
 8006d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d76:	d00b      	beq.n	8006d90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61bb      	str	r3, [r7, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	e7fd      	b.n	8006d8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01e      	beq.n	8006dd6 <xTaskCreateStatic+0xb2>
 8006d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01b      	beq.n	8006dd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006db0:	2300      	movs	r3, #0
 8006db2:	9303      	str	r3, [sp, #12]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	9302      	str	r3, [sp, #8]
 8006db8:	f107 0314 	add.w	r3, r7, #20
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f850 	bl	8006e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dd0:	f000 f8de 	bl	8006f90 <prvAddNewTaskToReadyList>
 8006dd4:	e001      	b.n	8006dda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006dda:	697b      	ldr	r3, [r7, #20]
	}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	@ 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	@ 0x30
 8006de8:	af04      	add	r7, sp, #16
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fd5f 	bl	80088bc <pvPortMalloc>
 8006dfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e06:	205c      	movs	r0, #92	@ 0x5c
 8006e08:	f001 fd58 	bl	80088bc <pvPortMalloc>
 8006e0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e1a:	e005      	b.n	8006e28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e1c:	6978      	ldr	r0, [r7, #20]
 8006e1e:	f001 fe1b 	bl	8008a58 <vPortFree>
 8006e22:	e001      	b.n	8006e28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f80e 	bl	8006e6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e52:	69f8      	ldr	r0, [r7, #28]
 8006e54:	f000 f89c 	bl	8006f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e002      	b.n	8006e64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e64:	69bb      	ldr	r3, [r7, #24]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b088      	sub	sp, #32
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	461a      	mov	r2, r3
 8006e86:	21a5      	movs	r1, #165	@ 0xa5
 8006e88:	f002 f910 	bl	80090ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e96:	3b01      	subs	r3, #1
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	617b      	str	r3, [r7, #20]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01f      	beq.n	8006f0e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e012      	b.n	8006efa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	7819      	ldrb	r1, [r3, #0]
 8006edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3334      	adds	r3, #52	@ 0x34
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b0f      	cmp	r3, #15
 8006efe:	d9e9      	bls.n	8006ed4 <prvInitialiseNewTask+0x66>
 8006f00:	e000      	b.n	8006f04 <prvInitialiseNewTask+0x96>
			{
				break;
 8006f02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f0c:	e003      	b.n	8006f16 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	2b37      	cmp	r3, #55	@ 0x37
 8006f1a:	d901      	bls.n	8006f20 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f1c:	2337      	movs	r3, #55	@ 0x37
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2200      	movs	r2, #0
 8006f30:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fd7c 	bl	8005a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd77 	bl	8005a34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	2200      	movs	r2, #0
 8006f60:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	69b8      	ldr	r0, [r7, #24]
 8006f70:	f001 fa4e 	bl	8008410 <pxPortInitialiseStack>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f86:	bf00      	nop
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f98:	f001 fb6e 	bl	8008678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fae:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fb4:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d110      	bne.n	8006fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fbc:	f000 fc1e 	bl	80077fc <prvInitialiseTaskLists>
 8006fc0:	e00d      	b.n	8006fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fc2:	4b26      	ldr	r3, [pc, #152]	@ (800705c <prvAddNewTaskToReadyList+0xcc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fca:	4b23      	ldr	r3, [pc, #140]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d802      	bhi.n	8006fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fde:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fe6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8007064 <prvAddNewTaskToReadyList+0xd4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d903      	bls.n	8007004 <prvAddNewTaskToReadyList+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <prvAddNewTaskToReadyList+0xd4>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a15      	ldr	r2, [pc, #84]	@ (8007068 <prvAddNewTaskToReadyList+0xd8>)
 8007012:	441a      	add	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fd17 	bl	8005a4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007020:	f001 fb5c 	bl	80086dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007024:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <prvAddNewTaskToReadyList+0xcc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800702c:	4b0a      	ldr	r3, [pc, #40]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	429a      	cmp	r2, r3
 8007038:	d207      	bcs.n	800704a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800703a:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <prvAddNewTaskToReadyList+0xdc>)
 800703c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000db8 	.word	0x20000db8
 8007058:	200008e4 	.word	0x200008e4
 800705c:	20000dc4 	.word	0x20000dc4
 8007060:	20000dd4 	.word	0x20000dd4
 8007064:	20000dc0 	.word	0x20000dc0
 8007068:	200008e8 	.word	0x200008e8
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007082:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <vTaskDelay+0x64>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <vTaskDelay+0x32>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60bb      	str	r3, [r7, #8]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070a2:	f000 f883 	bl	80071ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070a6:	2100      	movs	r1, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fe03 	bl	8007cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ae:	f000 f88b 	bl	80071c8 <xTaskResumeAll>
 80070b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80070ba:	4b07      	ldr	r3, [pc, #28]	@ (80070d8 <vTaskDelay+0x68>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000de0 	.word	0x20000de0
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	@ 0x28
 80070e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070ea:	463a      	mov	r2, r7
 80070ec:	1d39      	adds	r1, r7, #4
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fc4a 	bl	800598c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	9202      	str	r2, [sp, #8]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	460a      	mov	r2, r1
 800710a:	4922      	ldr	r1, [pc, #136]	@ (8007194 <vTaskStartScheduler+0xb8>)
 800710c:	4822      	ldr	r0, [pc, #136]	@ (8007198 <vTaskStartScheduler+0xbc>)
 800710e:	f7ff fe09 	bl	8006d24 <xTaskCreateStatic>
 8007112:	4603      	mov	r3, r0
 8007114:	4a21      	ldr	r2, [pc, #132]	@ (800719c <vTaskStartScheduler+0xc0>)
 8007116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007118:	4b20      	ldr	r3, [pc, #128]	@ (800719c <vTaskStartScheduler+0xc0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e001      	b.n	800712a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d102      	bne.n	8007136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007130:	f000 fe14 	bl	8007d5c <xTimerCreateTimerTask>
 8007134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d116      	bne.n	800716a <vTaskStartScheduler+0x8e>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	613b      	str	r3, [r7, #16]
}
 800714e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007150:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <vTaskStartScheduler+0xc4>)
 8007152:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007158:	4b12      	ldr	r3, [pc, #72]	@ (80071a4 <vTaskStartScheduler+0xc8>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800715e:	4b12      	ldr	r3, [pc, #72]	@ (80071a8 <vTaskStartScheduler+0xcc>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007164:	f001 f9e4 	bl	8008530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007168:	e00f      	b.n	800718a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007170:	d10b      	bne.n	800718a <vTaskStartScheduler+0xae>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <vTaskStartScheduler+0xaa>
}
 800718a:	bf00      	nop
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	08009c60 	.word	0x08009c60
 8007198:	080077cd 	.word	0x080077cd
 800719c:	20000ddc 	.word	0x20000ddc
 80071a0:	20000dd8 	.word	0x20000dd8
 80071a4:	20000dc4 	.word	0x20000dc4
 80071a8:	20000dbc 	.word	0x20000dbc

080071ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071b0:	4b04      	ldr	r3, [pc, #16]	@ (80071c4 <vTaskSuspendAll+0x18>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a03      	ldr	r2, [pc, #12]	@ (80071c4 <vTaskSuspendAll+0x18>)
 80071b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000de0 	.word	0x20000de0

080071c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071d6:	4b42      	ldr	r3, [pc, #264]	@ (80072e0 <xTaskResumeAll+0x118>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071f6:	f001 fa3f 	bl	8008678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071fa:	4b39      	ldr	r3, [pc, #228]	@ (80072e0 <xTaskResumeAll+0x118>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a37      	ldr	r2, [pc, #220]	@ (80072e0 <xTaskResumeAll+0x118>)
 8007202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007204:	4b36      	ldr	r3, [pc, #216]	@ (80072e0 <xTaskResumeAll+0x118>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d162      	bne.n	80072d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800720c:	4b35      	ldr	r3, [pc, #212]	@ (80072e4 <xTaskResumeAll+0x11c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d05e      	beq.n	80072d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007214:	e02f      	b.n	8007276 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007216:	4b34      	ldr	r3, [pc, #208]	@ (80072e8 <xTaskResumeAll+0x120>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3318      	adds	r3, #24
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fc70 	bl	8005b08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3304      	adds	r3, #4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fc6b 	bl	8005b08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007236:	4b2d      	ldr	r3, [pc, #180]	@ (80072ec <xTaskResumeAll+0x124>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d903      	bls.n	8007246 <xTaskResumeAll+0x7e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	4a2a      	ldr	r2, [pc, #168]	@ (80072ec <xTaskResumeAll+0x124>)
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4a27      	ldr	r2, [pc, #156]	@ (80072f0 <xTaskResumeAll+0x128>)
 8007254:	441a      	add	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fe fbf6 	bl	8005a4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <xTaskResumeAll+0x12c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007270:	4b21      	ldr	r3, [pc, #132]	@ (80072f8 <xTaskResumeAll+0x130>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007276:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <xTaskResumeAll+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1cb      	bne.n	8007216 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007284:	f000 fb58 	bl	8007938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007288:	4b1c      	ldr	r3, [pc, #112]	@ (80072fc <xTaskResumeAll+0x134>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007294:	f000 f846 	bl	8007324 <xTaskIncrementTick>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800729e:	4b16      	ldr	r3, [pc, #88]	@ (80072f8 <xTaskResumeAll+0x130>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f1      	bne.n	8007294 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80072b0:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <xTaskResumeAll+0x134>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072b6:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <xTaskResumeAll+0x130>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007300 <xTaskResumeAll+0x138>)
 80072c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 fa03 	bl	80086dc <vPortExitCritical>

	return xAlreadyYielded;
 80072d6:	68bb      	ldr	r3, [r7, #8]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000de0 	.word	0x20000de0
 80072e4:	20000db8 	.word	0x20000db8
 80072e8:	20000d78 	.word	0x20000d78
 80072ec:	20000dc0 	.word	0x20000dc0
 80072f0:	200008e8 	.word	0x200008e8
 80072f4:	200008e4 	.word	0x200008e4
 80072f8:	20000dcc 	.word	0x20000dcc
 80072fc:	20000dc8 	.word	0x20000dc8
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <xTaskGetTickCount+0x1c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007310:	687b      	ldr	r3, [r7, #4]
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000dbc 	.word	0x20000dbc

08007324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732e:	4b4f      	ldr	r3, [pc, #316]	@ (800746c <xTaskIncrementTick+0x148>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 8090 	bne.w	8007458 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007338:	4b4d      	ldr	r3, [pc, #308]	@ (8007470 <xTaskIncrementTick+0x14c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007340:	4a4b      	ldr	r2, [pc, #300]	@ (8007470 <xTaskIncrementTick+0x14c>)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d121      	bne.n	8007390 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800734c:	4b49      	ldr	r3, [pc, #292]	@ (8007474 <xTaskIncrementTick+0x150>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	603b      	str	r3, [r7, #0]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <xTaskIncrementTick+0x46>
 800736e:	4b41      	ldr	r3, [pc, #260]	@ (8007474 <xTaskIncrementTick+0x150>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	4b40      	ldr	r3, [pc, #256]	@ (8007478 <xTaskIncrementTick+0x154>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a3e      	ldr	r2, [pc, #248]	@ (8007474 <xTaskIncrementTick+0x150>)
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4a3e      	ldr	r2, [pc, #248]	@ (8007478 <xTaskIncrementTick+0x154>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	4b3e      	ldr	r3, [pc, #248]	@ (800747c <xTaskIncrementTick+0x158>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	4a3c      	ldr	r2, [pc, #240]	@ (800747c <xTaskIncrementTick+0x158>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	f000 fad4 	bl	8007938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007390:	4b3b      	ldr	r3, [pc, #236]	@ (8007480 <xTaskIncrementTick+0x15c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d349      	bcc.n	800742e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800739a:	4b36      	ldr	r3, [pc, #216]	@ (8007474 <xTaskIncrementTick+0x150>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a4:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <xTaskIncrementTick+0x15c>)
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073aa:	601a      	str	r2, [r3, #0]
					break;
 80073ac:	e03f      	b.n	800742e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ae:	4b31      	ldr	r3, [pc, #196]	@ (8007474 <xTaskIncrementTick+0x150>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d203      	bcs.n	80073ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007480 <xTaskIncrementTick+0x15c>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073cc:	e02f      	b.n	800742e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fb98 	bl	8005b08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3318      	adds	r3, #24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fb8f 	bl	8005b08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ee:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <xTaskIncrementTick+0x160>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d903      	bls.n	80073fe <xTaskIncrementTick+0xda>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	4a22      	ldr	r2, [pc, #136]	@ (8007484 <xTaskIncrementTick+0x160>)
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4a1f      	ldr	r2, [pc, #124]	@ (8007488 <xTaskIncrementTick+0x164>)
 800740c:	441a      	add	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7fe fb1a 	bl	8005a4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741e:	4b1b      	ldr	r3, [pc, #108]	@ (800748c <xTaskIncrementTick+0x168>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	429a      	cmp	r2, r3
 8007426:	d3b8      	bcc.n	800739a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007428:	2301      	movs	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800742c:	e7b5      	b.n	800739a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800742e:	4b17      	ldr	r3, [pc, #92]	@ (800748c <xTaskIncrementTick+0x168>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	4914      	ldr	r1, [pc, #80]	@ (8007488 <xTaskIncrementTick+0x164>)
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d901      	bls.n	800744a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007446:	2301      	movs	r3, #1
 8007448:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800744a:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <xTaskIncrementTick+0x16c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e004      	b.n	8007462 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007458:	4b0e      	ldr	r3, [pc, #56]	@ (8007494 <xTaskIncrementTick+0x170>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	4a0d      	ldr	r2, [pc, #52]	@ (8007494 <xTaskIncrementTick+0x170>)
 8007460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007462:	697b      	ldr	r3, [r7, #20]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000de0 	.word	0x20000de0
 8007470:	20000dbc 	.word	0x20000dbc
 8007474:	20000d70 	.word	0x20000d70
 8007478:	20000d74 	.word	0x20000d74
 800747c:	20000dd0 	.word	0x20000dd0
 8007480:	20000dd8 	.word	0x20000dd8
 8007484:	20000dc0 	.word	0x20000dc0
 8007488:	200008e8 	.word	0x200008e8
 800748c:	200008e4 	.word	0x200008e4
 8007490:	20000dcc 	.word	0x20000dcc
 8007494:	20000dc8 	.word	0x20000dc8

08007498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800749e:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <vTaskSwitchContext+0xa8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074a6:	4b27      	ldr	r3, [pc, #156]	@ (8007544 <vTaskSwitchContext+0xac>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074ac:	e042      	b.n	8007534 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80074ae:	4b25      	ldr	r3, [pc, #148]	@ (8007544 <vTaskSwitchContext+0xac>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b4:	4b24      	ldr	r3, [pc, #144]	@ (8007548 <vTaskSwitchContext+0xb0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e011      	b.n	80074e0 <vTaskSwitchContext+0x48>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <vTaskSwitchContext+0x42>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	607b      	str	r3, [r7, #4]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <vTaskSwitchContext+0x3e>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	491a      	ldr	r1, [pc, #104]	@ (800754c <vTaskSwitchContext+0xb4>)
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0e3      	beq.n	80074bc <vTaskSwitchContext+0x24>
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4a13      	ldr	r2, [pc, #76]	@ (800754c <vTaskSwitchContext+0xb4>)
 8007500:	4413      	add	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	3308      	adds	r3, #8
 8007516:	429a      	cmp	r2, r3
 8007518:	d104      	bne.n	8007524 <vTaskSwitchContext+0x8c>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	605a      	str	r2, [r3, #4]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	4a09      	ldr	r2, [pc, #36]	@ (8007550 <vTaskSwitchContext+0xb8>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	4a06      	ldr	r2, [pc, #24]	@ (8007548 <vTaskSwitchContext+0xb0>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6013      	str	r3, [r2, #0]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	20000de0 	.word	0x20000de0
 8007544:	20000dcc 	.word	0x20000dcc
 8007548:	20000dc0 	.word	0x20000dc0
 800754c:	200008e8 	.word	0x200008e8
 8007550:	200008e4 	.word	0x200008e4

08007554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757c:	4b07      	ldr	r3, [pc, #28]	@ (800759c <vTaskPlaceOnEventList+0x48>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3318      	adds	r3, #24
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fe fa86 	bl	8005a96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800758a:	2101      	movs	r1, #1
 800758c:	6838      	ldr	r0, [r7, #0]
 800758e:	f000 fb91 	bl	8007cb4 <prvAddCurrentTaskToDelayedList>
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200008e4 	.word	0x200008e4

080075a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	617b      	str	r3, [r7, #20]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075ca:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3318      	adds	r3, #24
 80075d0:	4619      	mov	r1, r3
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7fe fa3b 	bl	8005a4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	68b8      	ldr	r0, [r7, #8]
 80075e8:	f000 fb64 	bl	8007cb4 <prvAddCurrentTaskToDelayedList>
	}
 80075ec:	bf00      	nop
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	200008e4 	.word	0x200008e4

080075f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60fb      	str	r3, [r7, #12]
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3318      	adds	r3, #24
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fa6c 	bl	8005b08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007630:	4b1d      	ldr	r3, [pc, #116]	@ (80076a8 <xTaskRemoveFromEventList+0xb0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11d      	bne.n	8007674 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fa63 	bl	8005b08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007646:	4b19      	ldr	r3, [pc, #100]	@ (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d903      	bls.n	8007656 <xTaskRemoveFromEventList+0x5e>
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	4a16      	ldr	r2, [pc, #88]	@ (80076ac <xTaskRemoveFromEventList+0xb4>)
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4a13      	ldr	r2, [pc, #76]	@ (80076b0 <xTaskRemoveFromEventList+0xb8>)
 8007664:	441a      	add	r2, r3
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7fe f9ee 	bl	8005a4e <vListInsertEnd>
 8007672:	e005      	b.n	8007680 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3318      	adds	r3, #24
 8007678:	4619      	mov	r1, r3
 800767a:	480e      	ldr	r0, [pc, #56]	@ (80076b4 <xTaskRemoveFromEventList+0xbc>)
 800767c:	f7fe f9e7 	bl	8005a4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007684:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <xTaskRemoveFromEventList+0xc0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768a:	429a      	cmp	r2, r3
 800768c:	d905      	bls.n	800769a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800768e:	2301      	movs	r3, #1
 8007690:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007692:	4b0a      	ldr	r3, [pc, #40]	@ (80076bc <xTaskRemoveFromEventList+0xc4>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e001      	b.n	800769e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000de0 	.word	0x20000de0
 80076ac:	20000dc0 	.word	0x20000dc0
 80076b0:	200008e8 	.word	0x200008e8
 80076b4:	20000d78 	.word	0x20000d78
 80076b8:	200008e4 	.word	0x200008e4
 80076bc:	20000dcc 	.word	0x20000dcc

080076c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <vTaskInternalSetTimeOutState+0x24>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <vTaskInternalSetTimeOutState+0x28>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	605a      	str	r2, [r3, #4]
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000dd0 	.word	0x20000dd0
 80076e8:	20000dbc 	.word	0x20000dbc

080076ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10b      	bne.n	8007714 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	60fb      	str	r3, [r7, #12]
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007732:	f000 ffa1 	bl	8008678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007736:	4b1d      	ldr	r3, [pc, #116]	@ (80077ac <xTaskCheckForTimeOut+0xc0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800774e:	d102      	bne.n	8007756 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e023      	b.n	800779e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <xTaskCheckForTimeOut+0xc4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d007      	beq.n	8007772 <xTaskCheckForTimeOut+0x86>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d302      	bcc.n	8007772 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e015      	b.n	800779e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d20b      	bcs.n	8007794 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff99 	bl	80076c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e004      	b.n	800779e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f000 ff9d 	bl	80086dc <vPortExitCritical>

	return xReturn;
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000dbc 	.word	0x20000dbc
 80077b0:	20000dd0 	.word	0x20000dd0

080077b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b8:	4b03      	ldr	r3, [pc, #12]	@ (80077c8 <vTaskMissedYield+0x14>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20000dcc 	.word	0x20000dcc

080077cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077d4:	f000 f852 	bl	800787c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <prvIdleTask+0x28>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d9f9      	bls.n	80077d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <prvIdleTask+0x2c>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077f0:	e7f0      	b.n	80077d4 <prvIdleTask+0x8>
 80077f2:	bf00      	nop
 80077f4:	200008e8 	.word	0x200008e8
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	e00c      	b.n	8007822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4a12      	ldr	r2, [pc, #72]	@ (800785c <prvInitialiseTaskLists+0x60>)
 8007814:	4413      	add	r3, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe f8ec 	bl	80059f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3301      	adds	r3, #1
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b37      	cmp	r3, #55	@ 0x37
 8007826:	d9ef      	bls.n	8007808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007828:	480d      	ldr	r0, [pc, #52]	@ (8007860 <prvInitialiseTaskLists+0x64>)
 800782a:	f7fe f8e3 	bl	80059f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800782e:	480d      	ldr	r0, [pc, #52]	@ (8007864 <prvInitialiseTaskLists+0x68>)
 8007830:	f7fe f8e0 	bl	80059f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007834:	480c      	ldr	r0, [pc, #48]	@ (8007868 <prvInitialiseTaskLists+0x6c>)
 8007836:	f7fe f8dd 	bl	80059f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800783a:	480c      	ldr	r0, [pc, #48]	@ (800786c <prvInitialiseTaskLists+0x70>)
 800783c:	f7fe f8da 	bl	80059f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007840:	480b      	ldr	r0, [pc, #44]	@ (8007870 <prvInitialiseTaskLists+0x74>)
 8007842:	f7fe f8d7 	bl	80059f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007846:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <prvInitialiseTaskLists+0x78>)
 8007848:	4a05      	ldr	r2, [pc, #20]	@ (8007860 <prvInitialiseTaskLists+0x64>)
 800784a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <prvInitialiseTaskLists+0x7c>)
 800784e:	4a05      	ldr	r2, [pc, #20]	@ (8007864 <prvInitialiseTaskLists+0x68>)
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200008e8 	.word	0x200008e8
 8007860:	20000d48 	.word	0x20000d48
 8007864:	20000d5c 	.word	0x20000d5c
 8007868:	20000d78 	.word	0x20000d78
 800786c:	20000d8c 	.word	0x20000d8c
 8007870:	20000da4 	.word	0x20000da4
 8007874:	20000d70 	.word	0x20000d70
 8007878:	20000d74 	.word	0x20000d74

0800787c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007882:	e019      	b.n	80078b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007884:	f000 fef8 	bl	8008678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <prvCheckTasksWaitingTermination+0x50>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f937 	bl	8005b08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3b01      	subs	r3, #1
 80078a0:	4a0b      	ldr	r2, [pc, #44]	@ (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 80078a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078a4:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4a0a      	ldr	r2, [pc, #40]	@ (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078ae:	f000 ff15 	bl	80086dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f810 	bl	80078d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e1      	bne.n	8007884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000d8c 	.word	0x20000d8c
 80078d0:	20000db8 	.word	0x20000db8
 80078d4:	20000da0 	.word	0x20000da0

080078d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f8b2 	bl	8008a58 <vPortFree>
				vPortFree( pxTCB );
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f8af 	bl	8008a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078fa:	e019      	b.n	8007930 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007902:	2b01      	cmp	r3, #1
 8007904:	d103      	bne.n	800790e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 f8a6 	bl	8008a58 <vPortFree>
	}
 800790c:	e010      	b.n	8007930 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007914:	2b02      	cmp	r3, #2
 8007916:	d00b      	beq.n	8007930 <prvDeleteTCB+0x58>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <prvDeleteTCB+0x54>
	}
 8007930:	bf00      	nop
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 800794a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800794e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007950:	e008      	b.n	8007964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007952:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4a04      	ldr	r2, [pc, #16]	@ (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 8007962:	6013      	str	r3, [r2, #0]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000d70 	.word	0x20000d70
 8007974:	20000dd8 	.word	0x20000dd8

08007978 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800797e:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <xTaskGetCurrentTaskHandle+0x1c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007984:	687b      	ldr	r3, [r7, #4]
	}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	200008e4 	.word	0x200008e4

08007998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <xTaskGetSchedulerState+0x34>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d102      	bne.n	80079ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079a6:	2301      	movs	r3, #1
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	e008      	b.n	80079be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ac:	4b08      	ldr	r3, [pc, #32]	@ (80079d0 <xTaskGetSchedulerState+0x38>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079b4:	2302      	movs	r3, #2
 80079b6:	607b      	str	r3, [r7, #4]
 80079b8:	e001      	b.n	80079be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079ba:	2300      	movs	r3, #0
 80079bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079be:	687b      	ldr	r3, [r7, #4]
	}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20000dc4 	.word	0x20000dc4
 80079d0:	20000de0 	.word	0x20000de0

080079d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d051      	beq.n	8007a8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007a98 <xTaskPriorityInherit+0xc4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d241      	bcs.n	8007a7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	db06      	blt.n	8007a0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a00:	4b25      	ldr	r3, [pc, #148]	@ (8007a98 <xTaskPriorityInherit+0xc4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6959      	ldr	r1, [r3, #20]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a9c <xTaskPriorityInherit+0xc8>)
 8007a20:	4413      	add	r3, r2
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d122      	bne.n	8007a6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe f86c 	bl	8005b08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a30:	4b19      	ldr	r3, [pc, #100]	@ (8007a98 <xTaskPriorityInherit+0xc4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3e:	4b18      	ldr	r3, [pc, #96]	@ (8007aa0 <xTaskPriorityInherit+0xcc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d903      	bls.n	8007a4e <xTaskPriorityInherit+0x7a>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4a15      	ldr	r2, [pc, #84]	@ (8007aa0 <xTaskPriorityInherit+0xcc>)
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a10      	ldr	r2, [pc, #64]	@ (8007a9c <xTaskPriorityInherit+0xc8>)
 8007a5c:	441a      	add	r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7fd fff2 	bl	8005a4e <vListInsertEnd>
 8007a6a:	e004      	b.n	8007a76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <xTaskPriorityInherit+0xc4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a76:	2301      	movs	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	e008      	b.n	8007a8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a80:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <xTaskPriorityInherit+0xc4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d201      	bcs.n	8007a8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
	}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200008e4 	.word	0x200008e4
 8007a9c:	200008e8 	.word	0x200008e8
 8007aa0:	20000dc0 	.word	0x20000dc0

08007aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d058      	beq.n	8007b6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007aba:	4b2f      	ldr	r3, [pc, #188]	@ (8007b78 <xTaskPriorityDisinherit+0xd4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d00b      	beq.n	8007adc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	60fb      	str	r3, [r7, #12]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60bb      	str	r3, [r7, #8]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b00:	1e5a      	subs	r2, r3, #1
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d02c      	beq.n	8007b6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d128      	bne.n	8007b6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd fff2 	bl	8005b08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <xTaskPriorityDisinherit+0xd8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d903      	bls.n	8007b4c <xTaskPriorityDisinherit+0xa8>
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	4a0c      	ldr	r2, [pc, #48]	@ (8007b7c <xTaskPriorityDisinherit+0xd8>)
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a09      	ldr	r2, [pc, #36]	@ (8007b80 <xTaskPriorityDisinherit+0xdc>)
 8007b5a:	441a      	add	r2, r3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fd ff73 	bl	8005a4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b6c:	697b      	ldr	r3, [r7, #20]
	}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200008e4 	.word	0x200008e4
 8007b7c:	20000dc0 	.word	0x20000dc0
 8007b80:	200008e8 	.word	0x200008e8

08007b84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d06c      	beq.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d902      	bls.n	8007bcc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	e002      	b.n	8007bd2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d04c      	beq.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d147      	bne.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007be6:	4b26      	ldr	r3, [pc, #152]	@ (8007c80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d10b      	bne.n	8007c08 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60bb      	str	r3, [r7, #8]
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db04      	blt.n	8007c26 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	6959      	ldr	r1, [r3, #20]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4a13      	ldr	r2, [pc, #76]	@ (8007c84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c36:	4413      	add	r3, r2
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d11c      	bne.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd ff61 	bl	8005b08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d903      	bls.n	8007c5a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c56:	4a0c      	ldr	r2, [pc, #48]	@ (8007c88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4a07      	ldr	r2, [pc, #28]	@ (8007c84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c68:	441a      	add	r2, r3
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7fd feec 	bl	8005a4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c76:	bf00      	nop
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200008e4 	.word	0x200008e4
 8007c84:	200008e8 	.word	0x200008e8
 8007c88:	20000dc0 	.word	0x20000dc0

08007c8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c90:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c98:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c9e:	3201      	adds	r2, #1
 8007ca0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007ca2:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	200008e4 	.word	0x200008e4

08007cb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cbe:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc4:	4b20      	ldr	r3, [pc, #128]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fd ff1c 	bl	8005b08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd6:	d10a      	bne.n	8007cee <prvAddCurrentTaskToDelayedList+0x3a>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cde:	4b1a      	ldr	r3, [pc, #104]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4819      	ldr	r0, [pc, #100]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ce8:	f7fd feb1 	bl	8005a4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cec:	e026      	b.n	8007d3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d209      	bcs.n	8007d1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d06:	4b12      	ldr	r3, [pc, #72]	@ (8007d50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f7fd febf 	bl	8005a96 <vListInsert>
}
 8007d18:	e010      	b.n	8007d3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fd feb5 	bl	8005a96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d202      	bcs.n	8007d3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d36:	4a08      	ldr	r2, [pc, #32]	@ (8007d58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6013      	str	r3, [r2, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000dbc 	.word	0x20000dbc
 8007d48:	200008e4 	.word	0x200008e4
 8007d4c:	20000da4 	.word	0x20000da4
 8007d50:	20000d74 	.word	0x20000d74
 8007d54:	20000d70 	.word	0x20000d70
 8007d58:	20000dd8 	.word	0x20000dd8

08007d5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d66:	f000 fb13 	bl	8008390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <xTimerCreateTimerTask+0x84>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d021      	beq.n	8007db6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d7a:	1d3a      	adds	r2, r7, #4
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fd fe1b 	bl	80059c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	2302      	movs	r3, #2
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	460a      	mov	r2, r1
 8007d9c:	4911      	ldr	r1, [pc, #68]	@ (8007de4 <xTimerCreateTimerTask+0x88>)
 8007d9e:	4812      	ldr	r0, [pc, #72]	@ (8007de8 <xTimerCreateTimerTask+0x8c>)
 8007da0:	f7fe ffc0 	bl	8006d24 <xTaskCreateStatic>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4a11      	ldr	r2, [pc, #68]	@ (8007dec <xTimerCreateTimerTask+0x90>)
 8007da8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007daa:	4b10      	ldr	r3, [pc, #64]	@ (8007dec <xTimerCreateTimerTask+0x90>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007db2:	2301      	movs	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10b      	bne.n	8007dd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	613b      	str	r3, [r7, #16]
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dd4:	697b      	ldr	r3, [r7, #20]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000e14 	.word	0x20000e14
 8007de4:	08009c68 	.word	0x08009c68
 8007de8:	08007f29 	.word	0x08007f29
 8007dec:	20000e18 	.word	0x20000e18

08007df0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	@ 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10b      	bne.n	8007e20 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	623b      	str	r3, [r7, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	bf00      	nop
 8007e1e:	e7fd      	b.n	8007e1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e20:	4b19      	ldr	r3, [pc, #100]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d02a      	beq.n	8007e7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	dc18      	bgt.n	8007e6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e3a:	f7ff fdad 	bl	8007998 <xTaskGetSchedulerState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d109      	bne.n	8007e58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e44:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f107 0110 	add.w	r1, r7, #16
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e50:	f7fe f8f0 	bl	8006034 <xQueueGenericSend>
 8007e54:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e56:	e012      	b.n	8007e7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e58:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	f107 0110 	add.w	r1, r7, #16
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	f7fe f8e6 	bl	8006034 <xQueueGenericSend>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e6a:	e008      	b.n	8007e7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <xTimerGenericCommand+0x98>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	f107 0110 	add.w	r1, r7, #16
 8007e74:	2300      	movs	r3, #0
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	f7fe f9de 	bl	8006238 <xQueueGenericSendFromISR>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3728      	adds	r7, #40	@ 0x28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000e14 	.word	0x20000e14

08007e8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e96:	4b23      	ldr	r3, [pc, #140]	@ (8007f24 <prvProcessExpiredTimer+0x98>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fd fe2f 	bl	8005b08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d023      	beq.n	8007f00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	18d1      	adds	r1, r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f000 f8d5 	bl	8008074 <prvInsertTimerInActiveList>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d020      	beq.n	8007f12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	6978      	ldr	r0, [r7, #20]
 8007edc:	f7ff ff88 	bl	8007df0 <xTimerGenericCommand>
 8007ee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d114      	bne.n	8007f12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60fb      	str	r3, [r7, #12]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6978      	ldr	r0, [r7, #20]
 8007f18:	4798      	blx	r3
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000e0c 	.word	0x20000e0c

08007f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f30:	f107 0308 	add.w	r3, r7, #8
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f859 	bl	8007fec <prvGetNextExpireTime>
 8007f3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f805 	bl	8007f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f46:	f000 f8d7 	bl	80080f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f4a:	bf00      	nop
 8007f4c:	e7f0      	b.n	8007f30 <prvTimerTask+0x8>
	...

08007f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f5a:	f7ff f927 	bl	80071ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f866 	bl	8008034 <prvSampleTimeNow>
 8007f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d130      	bne.n	8007fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d806      	bhi.n	8007f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f7e:	f7ff f923 	bl	80071c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff81 	bl	8007e8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f8a:	e024      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f92:	4b13      	ldr	r3, [pc, #76]	@ (8007fe0 <prvProcessTimerOrBlockTask+0x90>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <prvProcessTimerOrBlockTask+0x50>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <prvProcessTimerOrBlockTask+0x52>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe4 <prvProcessTimerOrBlockTask+0x94>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f7fe fe83 	bl	8006cbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fb6:	f7ff f907 	bl	80071c8 <xTaskResumeAll>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fc0:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <prvProcessTimerOrBlockTask+0x98>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
}
 8007fd0:	e001      	b.n	8007fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fd2:	f7ff f8f9 	bl	80071c8 <xTaskResumeAll>
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000e10 	.word	0x20000e10
 8007fe4:	20000e14 	.word	0x20000e14
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <prvGetNextExpireTime+0x44>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <prvGetNextExpireTime+0x16>
 8007ffe:	2201      	movs	r2, #1
 8008000:	e000      	b.n	8008004 <prvGetNextExpireTime+0x18>
 8008002:	2200      	movs	r2, #0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <prvGetNextExpireTime+0x44>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e001      	b.n	8008020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000e0c 	.word	0x20000e0c

08008034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800803c:	f7ff f962 	bl	8007304 <xTaskGetTickCount>
 8008040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <prvSampleTimeNow+0x3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	429a      	cmp	r2, r3
 800804a:	d205      	bcs.n	8008058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800804c:	f000 f93a 	bl	80082c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800805e:	4a04      	ldr	r2, [pc, #16]	@ (8008070 <prvSampleTimeNow+0x3c>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000e1c 	.word	0x20000e1c

08008074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d812      	bhi.n	80080c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e01b      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <prvInsertTimerInActiveList+0x7c>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fd fcec 	bl	8005a96 <vListInsert>
 80080be:	e012      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d206      	bcs.n	80080d6 <prvInsertTimerInActiveList+0x62>
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e007      	b.n	80080e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <prvInsertTimerInActiveList+0x80>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd fcd8 	bl	8005a96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000e10 	.word	0x20000e10
 80080f4:	20000e0c 	.word	0x20000e0c

080080f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	@ 0x38
 80080fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080fe:	e0ce      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	da19      	bge.n	800813a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	3304      	adds	r3, #4
 800810a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10b      	bne.n	800812a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	61fb      	str	r3, [r7, #28]
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	e7fd      	b.n	8008126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008130:	6850      	ldr	r0, [r2, #4]
 8008132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008134:	6892      	ldr	r2, [r2, #8]
 8008136:	4611      	mov	r1, r2
 8008138:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f2c0 80ae 	blt.w	800829e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	3304      	adds	r3, #4
 8008152:	4618      	mov	r0, r3
 8008154:	f7fd fcd8 	bl	8005b08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008158:	463b      	mov	r3, r7
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff ff6a 	bl	8008034 <prvSampleTimeNow>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b09      	cmp	r3, #9
 8008166:	f200 8097 	bhi.w	8008298 <prvProcessReceivedCommands+0x1a0>
 800816a:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <prvProcessReceivedCommands+0x78>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008199 	.word	0x08008199
 8008174:	08008199 	.word	0x08008199
 8008178:	08008199 	.word	0x08008199
 800817c:	0800820f 	.word	0x0800820f
 8008180:	08008223 	.word	0x08008223
 8008184:	0800826f 	.word	0x0800826f
 8008188:	08008199 	.word	0x08008199
 800818c:	08008199 	.word	0x08008199
 8008190:	0800820f 	.word	0x0800820f
 8008194:	08008223 	.word	0x08008223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	f7ff ff5c 	bl	8008074 <prvInsertTimerInActiveList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d06c      	beq.n	800829c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d061      	beq.n	800829c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	441a      	add	r2, r3
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ea:	f7ff fe01 	bl	8007df0 <xTimerGenericCommand>
 80081ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d152      	bne.n	800829c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61bb      	str	r3, [r7, #24]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008220:	e03d      	b.n	800829e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	b2da      	uxtb	r2, r3
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	617b      	str	r3, [r7, #20]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	18d1      	adds	r1, r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008268:	f7ff ff04 	bl	8008074 <prvInsertTimerInActiveList>
					break;
 800826c:	e017      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800827c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800827e:	f000 fbeb 	bl	8008a58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008282:	e00c      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008296:	e002      	b.n	800829e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <prvProcessReceivedCommands+0x1a6>
					break;
 800829c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829e:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <prvProcessReceivedCommands+0x1c8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	1d39      	adds	r1, r7, #4
 80082a4:	2200      	movs	r2, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe f8f4 	bl	8006494 <xQueueReceive>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f47f af26 	bne.w	8008100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	3730      	adds	r7, #48	@ 0x30
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000e14 	.word	0x20000e14

080082c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ca:	e049      	b.n	8008360 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b2c      	ldr	r3, [pc, #176]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fd fc0f 	bl	8005b08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d02f      	beq.n	8008360 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4413      	add	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	429a      	cmp	r2, r3
 8008310:	d90e      	bls.n	8008330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b1a      	ldr	r3, [pc, #104]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fd fbb4 	bl	8005a96 <vListInsert>
 800832e:	e017      	b.n	8008360 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	2100      	movs	r1, #0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fd58 	bl	8007df0 <xTimerGenericCommand>
 8008340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10b      	bne.n	8008360 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	603b      	str	r3, [r7, #0]
}
 800835a:	bf00      	nop
 800835c:	bf00      	nop
 800835e:	e7fd      	b.n	800835c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008360:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1b0      	bne.n	80082cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800836a:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <prvSwitchTimerLists+0xc8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <prvSwitchTimerLists+0xc4>)
 8008376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008378:	4a04      	ldr	r2, [pc, #16]	@ (800838c <prvSwitchTimerLists+0xc8>)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6013      	str	r3, [r2, #0]
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000e0c 	.word	0x20000e0c
 800838c:	20000e10 	.word	0x20000e10

08008390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008396:	f000 f96f 	bl	8008678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800839a:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d120      	bne.n	80083e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083a2:	4814      	ldr	r0, [pc, #80]	@ (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083a4:	f7fd fb26 	bl	80059f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083a8:	4813      	ldr	r0, [pc, #76]	@ (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083aa:	f7fd fb23 	bl	80059f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ae:	4b13      	ldr	r3, [pc, #76]	@ (80083fc <prvCheckForValidListAndQueue+0x6c>)
 80083b0:	4a10      	ldr	r2, [pc, #64]	@ (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083b4:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <prvCheckForValidListAndQueue+0x70>)
 80083b6:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ba:	2300      	movs	r3, #0
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4b11      	ldr	r3, [pc, #68]	@ (8008404 <prvCheckForValidListAndQueue+0x74>)
 80083c0:	4a11      	ldr	r2, [pc, #68]	@ (8008408 <prvCheckForValidListAndQueue+0x78>)
 80083c2:	2110      	movs	r1, #16
 80083c4:	200a      	movs	r0, #10
 80083c6:	f7fd fc33 	bl	8005c30 <xQueueGenericCreateStatic>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083d0:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	490b      	ldr	r1, [pc, #44]	@ (800840c <prvCheckForValidListAndQueue+0x7c>)
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fc18 	bl	8006c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083e4:	f000 f97a 	bl	80086dc <vPortExitCritical>
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000e14 	.word	0x20000e14
 80083f4:	20000de4 	.word	0x20000de4
 80083f8:	20000df8 	.word	0x20000df8
 80083fc:	20000e0c 	.word	0x20000e0c
 8008400:	20000e10 	.word	0x20000e10
 8008404:	20000ec0 	.word	0x20000ec0
 8008408:	20000e20 	.word	0x20000e20
 800840c:	08009c70 	.word	0x08009c70

08008410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3b04      	subs	r3, #4
 8008420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b04      	subs	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f023 0201 	bic.w	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3b04      	subs	r3, #4
 800843e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008440:	4a0c      	ldr	r2, [pc, #48]	@ (8008474 <pxPortInitialiseStack+0x64>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3b14      	subs	r3, #20
 800844a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f06f 0202 	mvn.w	r2, #2
 800845e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3b20      	subs	r3, #32
 8008464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008466:	68fb      	ldr	r3, [r7, #12]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	08008479 	.word	0x08008479

08008478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008482:	4b13      	ldr	r3, [pc, #76]	@ (80084d0 <prvTaskExitError+0x58>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800848a:	d00b      	beq.n	80084a4 <prvTaskExitError+0x2c>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60fb      	str	r3, [r7, #12]
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <prvTaskExitError+0x28>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60bb      	str	r3, [r7, #8]
}
 80084b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084b8:	bf00      	nop
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0fc      	beq.n	80084ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	2000000c 	.word	0x2000000c
	...

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008508:	4808      	ldr	r0, [pc, #32]	@ (800852c <prvPortStartFirstTask+0x24>)
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6800      	ldr	r0, [r0, #0]
 800850e:	f380 8808 	msr	MSP, r0
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8814 	msr	CONTROL, r0
 800851a:	b662      	cpsie	i
 800851c:	b661      	cpsie	f
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	df00      	svc	0
 8008528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800852a:	bf00      	nop
 800852c:	e000ed08 	.word	0xe000ed08

08008530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008536:	4b47      	ldr	r3, [pc, #284]	@ (8008654 <xPortStartScheduler+0x124>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a47      	ldr	r2, [pc, #284]	@ (8008658 <xPortStartScheduler+0x128>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10b      	bne.n	8008558 <xPortStartScheduler+0x28>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008558:	4b3e      	ldr	r3, [pc, #248]	@ (8008654 <xPortStartScheduler+0x124>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3f      	ldr	r2, [pc, #252]	@ (800865c <xPortStartScheduler+0x12c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d10b      	bne.n	800857a <xPortStartScheduler+0x4a>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800857a:	4b39      	ldr	r3, [pc, #228]	@ (8008660 <xPortStartScheduler+0x130>)
 800857c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	22ff      	movs	r2, #255	@ 0xff
 800858a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800859c:	b2da      	uxtb	r2, r3
 800859e:	4b31      	ldr	r3, [pc, #196]	@ (8008664 <xPortStartScheduler+0x134>)
 80085a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085a2:	4b31      	ldr	r3, [pc, #196]	@ (8008668 <xPortStartScheduler+0x138>)
 80085a4:	2207      	movs	r2, #7
 80085a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085a8:	e009      	b.n	80085be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008668 <xPortStartScheduler+0x138>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008668 <xPortStartScheduler+0x138>)
 80085b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c6:	2b80      	cmp	r3, #128	@ 0x80
 80085c8:	d0ef      	beq.n	80085aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ca:	4b27      	ldr	r3, [pc, #156]	@ (8008668 <xPortStartScheduler+0x138>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1c3 0307 	rsb	r3, r3, #7
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d00b      	beq.n	80085ee <xPortStartScheduler+0xbe>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <xPortStartScheduler+0x138>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008668 <xPortStartScheduler+0x138>)
 80085f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008668 <xPortStartScheduler+0x138>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008600:	4a19      	ldr	r2, [pc, #100]	@ (8008668 <xPortStartScheduler+0x138>)
 8008602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800860c:	4b17      	ldr	r3, [pc, #92]	@ (800866c <xPortStartScheduler+0x13c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a16      	ldr	r2, [pc, #88]	@ (800866c <xPortStartScheduler+0x13c>)
 8008612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008618:	4b14      	ldr	r3, [pc, #80]	@ (800866c <xPortStartScheduler+0x13c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a13      	ldr	r2, [pc, #76]	@ (800866c <xPortStartScheduler+0x13c>)
 800861e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008624:	f000 f8da 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008628:	4b11      	ldr	r3, [pc, #68]	@ (8008670 <xPortStartScheduler+0x140>)
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800862e:	f000 f8f9 	bl	8008824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008632:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <xPortStartScheduler+0x144>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a0f      	ldr	r2, [pc, #60]	@ (8008674 <xPortStartScheduler+0x144>)
 8008638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800863c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800863e:	f7ff ff63 	bl	8008508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008642:	f7fe ff29 	bl	8007498 <vTaskSwitchContext>
	prvTaskExitError();
 8008646:	f7ff ff17 	bl	8008478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	e000ed00 	.word	0xe000ed00
 8008658:	410fc271 	.word	0x410fc271
 800865c:	410fc270 	.word	0x410fc270
 8008660:	e000e400 	.word	0xe000e400
 8008664:	20000f10 	.word	0x20000f10
 8008668:	20000f14 	.word	0x20000f14
 800866c:	e000ed20 	.word	0xe000ed20
 8008670:	2000000c 	.word	0x2000000c
 8008674:	e000ef34 	.word	0xe000ef34

08008678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <vPortEnterCritical+0x5c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	4a0e      	ldr	r2, [pc, #56]	@ (80086d4 <vPortEnterCritical+0x5c>)
 800869a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800869c:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <vPortEnterCritical+0x5c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d110      	bne.n	80086c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086a4:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <vPortEnterCritical+0x60>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <vPortEnterCritical+0x4a>
	}
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	2000000c 	.word	0x2000000c
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086e2:	4b12      	ldr	r3, [pc, #72]	@ (800872c <vPortExitCritical+0x50>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <vPortExitCritical+0x26>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	4a08      	ldr	r2, [pc, #32]	@ (800872c <vPortExitCritical+0x50>)
 800870a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vPortExitCritical+0x50>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <vPortExitCritical+0x44>
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f383 8811 	msr	BASEPRI, r3
}
 800871e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	2000000c 	.word	0x2000000c

08008730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008730:	f3ef 8009 	mrs	r0, PSP
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <pxCurrentTCBConst>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f01e 0f10 	tst.w	lr, #16
 8008740:	bf08      	it	eq
 8008742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	6010      	str	r0, [r2, #0]
 800874c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008754:	f380 8811 	msr	BASEPRI, r0
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f7fe fe9a 	bl	8007498 <vTaskSwitchContext>
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f380 8811 	msr	BASEPRI, r0
 800876c:	bc09      	pop	{r0, r3}
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	6808      	ldr	r0, [r1, #0]
 8008772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008776:	f01e 0f10 	tst.w	lr, #16
 800877a:	bf08      	it	eq
 800877c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008780:	f380 8809 	msr	PSP, r0
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst>:
 8008790:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7fe fdb7 	bl	8007324 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <xPortSysTickHandler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	@ (800881c <vPortSetupTimerInterrupt+0x40>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a09      	ldr	r2, [pc, #36]	@ (8008820 <vPortSetupTimerInterrupt+0x44>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <vPortSetupTimerInterrupt+0x34>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	e000e010 	.word	0xe000e010
 8008814:	e000e018 	.word	0xe000e018
 8008818:	20000000 	.word	0x20000000
 800881c:	10624dd3 	.word	0x10624dd3
 8008820:	e000e014 	.word	0xe000e014

08008824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008834 <vPortEnableVFP+0x10>
 8008828:	6801      	ldr	r1, [r0, #0]
 800882a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800882e:	6001      	str	r1, [r0, #0]
 8008830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008832:	bf00      	nop
 8008834:	e000ed88 	.word	0xe000ed88

08008838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800883e:	f3ef 8305 	mrs	r3, IPSR
 8008842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d915      	bls.n	8008876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800884a:	4a18      	ldr	r2, [pc, #96]	@ (80088ac <vPortValidateInterruptPriority+0x74>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008854:	4b16      	ldr	r3, [pc, #88]	@ (80088b0 <vPortValidateInterruptPriority+0x78>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	7afa      	ldrb	r2, [r7, #11]
 800885a:	429a      	cmp	r2, r3
 800885c:	d20b      	bcs.n	8008876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008876:	4b0f      	ldr	r3, [pc, #60]	@ (80088b4 <vPortValidateInterruptPriority+0x7c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800887e:	4b0e      	ldr	r3, [pc, #56]	@ (80088b8 <vPortValidateInterruptPriority+0x80>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d90b      	bls.n	800889e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	603b      	str	r3, [r7, #0]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <vPortValidateInterruptPriority+0x62>
	}
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	e000e3f0 	.word	0xe000e3f0
 80088b0:	20000f10 	.word	0x20000f10
 80088b4:	e000ed0c 	.word	0xe000ed0c
 80088b8:	20000f14 	.word	0x20000f14

080088bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	@ 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088c8:	f7fe fc70 	bl	80071ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008a40 <pvPortMalloc+0x184>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088d4:	f000 f924 	bl	8008b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a44 <pvPortMalloc+0x188>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f040 8095 	bne.w	8008a10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01e      	beq.n	800892a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088ec:	2208      	movs	r2, #8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d015      	beq.n	800892a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f023 0307 	bic.w	r3, r3, #7
 8008904:	3308      	adds	r3, #8
 8008906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <pvPortMalloc+0x6e>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	617b      	str	r3, [r7, #20]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d06f      	beq.n	8008a10 <pvPortMalloc+0x154>
 8008930:	4b45      	ldr	r3, [pc, #276]	@ (8008a48 <pvPortMalloc+0x18c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	429a      	cmp	r2, r3
 8008938:	d86a      	bhi.n	8008a10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800893a:	4b44      	ldr	r3, [pc, #272]	@ (8008a4c <pvPortMalloc+0x190>)
 800893c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800893e:	4b43      	ldr	r3, [pc, #268]	@ (8008a4c <pvPortMalloc+0x190>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008944:	e004      	b.n	8008950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d903      	bls.n	8008962 <pvPortMalloc+0xa6>
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f1      	bne.n	8008946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008962:	4b37      	ldr	r3, [pc, #220]	@ (8008a40 <pvPortMalloc+0x184>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008968:	429a      	cmp	r2, r3
 800896a:	d051      	beq.n	8008a10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2208      	movs	r2, #8
 8008972:	4413      	add	r3, r2
 8008974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	1ad2      	subs	r2, r2, r3
 8008986:	2308      	movs	r3, #8
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	429a      	cmp	r2, r3
 800898c:	d920      	bls.n	80089d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800898e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <pvPortMalloc+0xfc>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089ca:	69b8      	ldr	r0, [r7, #24]
 80089cc:	f000 f90a 	bl	8008be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a48 <pvPortMalloc+0x18c>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	4a1b      	ldr	r2, [pc, #108]	@ (8008a48 <pvPortMalloc+0x18c>)
 80089dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089de:	4b1a      	ldr	r3, [pc, #104]	@ (8008a48 <pvPortMalloc+0x18c>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a50 <pvPortMalloc+0x194>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d203      	bcs.n	80089f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089ea:	4b17      	ldr	r3, [pc, #92]	@ (8008a48 <pvPortMalloc+0x18c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a18      	ldr	r2, [pc, #96]	@ (8008a50 <pvPortMalloc+0x194>)
 80089f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	4b13      	ldr	r3, [pc, #76]	@ (8008a44 <pvPortMalloc+0x188>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a06:	4b13      	ldr	r3, [pc, #76]	@ (8008a54 <pvPortMalloc+0x198>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	4a11      	ldr	r2, [pc, #68]	@ (8008a54 <pvPortMalloc+0x198>)
 8008a0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a10:	f7fe fbda 	bl	80071c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <pvPortMalloc+0x17a>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60fb      	str	r3, [r7, #12]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <pvPortMalloc+0x176>
	return pvReturn;
 8008a36:	69fb      	ldr	r3, [r7, #28]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3728      	adds	r7, #40	@ 0x28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20003660 	.word	0x20003660
 8008a44:	20003674 	.word	0x20003674
 8008a48:	20003664 	.word	0x20003664
 8008a4c:	20003658 	.word	0x20003658
 8008a50:	20003668 	.word	0x20003668
 8008a54:	2000366c 	.word	0x2000366c

08008a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d04f      	beq.n	8008b0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	425b      	negs	r3, r3
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	4b25      	ldr	r3, [pc, #148]	@ (8008b14 <vPortFree+0xbc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4013      	ands	r3, r2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <vPortFree+0x46>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	60fb      	str	r3, [r7, #12]
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00b      	beq.n	8008abe <vPortFree+0x66>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60bb      	str	r3, [r7, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <vPortFree+0xbc>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01e      	beq.n	8008b0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11a      	bne.n	8008b0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <vPortFree+0xbc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	43db      	mvns	r3, r3
 8008ade:	401a      	ands	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae4:	f7fe fb62 	bl	80071ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	4b0a      	ldr	r3, [pc, #40]	@ (8008b18 <vPortFree+0xc0>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4413      	add	r3, r2
 8008af2:	4a09      	ldr	r2, [pc, #36]	@ (8008b18 <vPortFree+0xc0>)
 8008af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008af6:	6938      	ldr	r0, [r7, #16]
 8008af8:	f000 f874 	bl	8008be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008afc:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vPortFree+0xc4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	4a06      	ldr	r2, [pc, #24]	@ (8008b1c <vPortFree+0xc4>)
 8008b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b06:	f7fe fb5f 	bl	80071c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b0a:	bf00      	nop
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20003674 	.word	0x20003674
 8008b18:	20003664 	.word	0x20003664
 8008b1c:	20003670 	.word	0x20003670

08008b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b26:	f44f 531d 	mov.w	r3, #10048	@ 0x2740
 8008b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b2c:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <prvHeapInit+0xac>)
 8008b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00c      	beq.n	8008b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <prvHeapInit+0xac>)
 8008b50:	4413      	add	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b58:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd0 <prvHeapInit+0xb0>)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd0 <prvHeapInit+0xb0>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	4413      	add	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1a9b      	subs	r3, r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a15      	ldr	r2, [pc, #84]	@ (8008bd4 <prvHeapInit+0xb4>)
 8008b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b82:	4b14      	ldr	r3, [pc, #80]	@ (8008bd4 <prvHeapInit+0xb4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b8a:	4b12      	ldr	r3, [pc, #72]	@ (8008bd4 <prvHeapInit+0xb4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	1ad2      	subs	r2, r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd4 <prvHeapInit+0xb4>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd8 <prvHeapInit+0xb8>)
 8008bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a09      	ldr	r2, [pc, #36]	@ (8008bdc <prvHeapInit+0xbc>)
 8008bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bb8:	4b09      	ldr	r3, [pc, #36]	@ (8008be0 <prvHeapInit+0xc0>)
 8008bba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bbe:	601a      	str	r2, [r3, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000f18 	.word	0x20000f18
 8008bd0:	20003658 	.word	0x20003658
 8008bd4:	20003660 	.word	0x20003660
 8008bd8:	20003668 	.word	0x20003668
 8008bdc:	20003664 	.word	0x20003664
 8008be0:	20003674 	.word	0x20003674

08008be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bec:	4b28      	ldr	r3, [pc, #160]	@ (8008c90 <prvInsertBlockIntoFreeList+0xac>)
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e002      	b.n	8008bf8 <prvInsertBlockIntoFreeList+0x14>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d8f7      	bhi.n	8008bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d108      	bne.n	8008c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	441a      	add	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d118      	bne.n	8008c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b15      	ldr	r3, [pc, #84]	@ (8008c94 <prvInsertBlockIntoFreeList+0xb0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d00d      	beq.n	8008c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e008      	b.n	8008c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c62:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <prvInsertBlockIntoFreeList+0xb0>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e003      	b.n	8008c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d002      	beq.n	8008c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	20003658 	.word	0x20003658
 8008c94:	20003660 	.word	0x20003660

08008c98 <std>:
 8008c98:	2300      	movs	r3, #0
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ca6:	6083      	str	r3, [r0, #8]
 8008ca8:	8181      	strh	r1, [r0, #12]
 8008caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cac:	81c2      	strh	r2, [r0, #14]
 8008cae:	6183      	str	r3, [r0, #24]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	305c      	adds	r0, #92	@ 0x5c
 8008cb6:	f000 f9f9 	bl	80090ac <memset>
 8008cba:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf0 <std+0x58>)
 8008cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <std+0x5c>)
 8008cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf8 <std+0x60>)
 8008cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <std+0x64>)
 8008cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cca:	4b0d      	ldr	r3, [pc, #52]	@ (8008d00 <std+0x68>)
 8008ccc:	6224      	str	r4, [r4, #32]
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d006      	beq.n	8008ce0 <std+0x48>
 8008cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cd6:	4294      	cmp	r4, r2
 8008cd8:	d002      	beq.n	8008ce0 <std+0x48>
 8008cda:	33d0      	adds	r3, #208	@ 0xd0
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	d105      	bne.n	8008cec <std+0x54>
 8008ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce8:	f000 ba58 	b.w	800919c <__retarget_lock_init_recursive>
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	bf00      	nop
 8008cf0:	08008efd 	.word	0x08008efd
 8008cf4:	08008f1f 	.word	0x08008f1f
 8008cf8:	08008f57 	.word	0x08008f57
 8008cfc:	08008f7b 	.word	0x08008f7b
 8008d00:	20003678 	.word	0x20003678

08008d04 <stdio_exit_handler>:
 8008d04:	4a02      	ldr	r2, [pc, #8]	@ (8008d10 <stdio_exit_handler+0xc>)
 8008d06:	4903      	ldr	r1, [pc, #12]	@ (8008d14 <stdio_exit_handler+0x10>)
 8008d08:	4803      	ldr	r0, [pc, #12]	@ (8008d18 <stdio_exit_handler+0x14>)
 8008d0a:	f000 b869 	b.w	8008de0 <_fwalk_sglue>
 8008d0e:	bf00      	nop
 8008d10:	20000010 	.word	0x20000010
 8008d14:	08009a59 	.word	0x08009a59
 8008d18:	20000020 	.word	0x20000020

08008d1c <cleanup_stdio>:
 8008d1c:	6841      	ldr	r1, [r0, #4]
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <cleanup_stdio+0x34>)
 8008d20:	4299      	cmp	r1, r3
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	d001      	beq.n	8008d2c <cleanup_stdio+0x10>
 8008d28:	f000 fe96 	bl	8009a58 <_fflush_r>
 8008d2c:	68a1      	ldr	r1, [r4, #8]
 8008d2e:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <cleanup_stdio+0x38>)
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <cleanup_stdio+0x1e>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fe8f 	bl	8009a58 <_fflush_r>
 8008d3a:	68e1      	ldr	r1, [r4, #12]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <cleanup_stdio+0x3c>)
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d004      	beq.n	8008d4c <cleanup_stdio+0x30>
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d48:	f000 be86 	b.w	8009a58 <_fflush_r>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	20003678 	.word	0x20003678
 8008d54:	200036e0 	.word	0x200036e0
 8008d58:	20003748 	.word	0x20003748

08008d5c <global_stdio_init.part.0>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d8c <global_stdio_init.part.0+0x30>)
 8008d60:	4c0b      	ldr	r4, [pc, #44]	@ (8008d90 <global_stdio_init.part.0+0x34>)
 8008d62:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <global_stdio_init.part.0+0x38>)
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2104      	movs	r1, #4
 8008d6c:	f7ff ff94 	bl	8008c98 <std>
 8008d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d74:	2201      	movs	r2, #1
 8008d76:	2109      	movs	r1, #9
 8008d78:	f7ff ff8e 	bl	8008c98 <std>
 8008d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d80:	2202      	movs	r2, #2
 8008d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d86:	2112      	movs	r1, #18
 8008d88:	f7ff bf86 	b.w	8008c98 <std>
 8008d8c:	200037b0 	.word	0x200037b0
 8008d90:	20003678 	.word	0x20003678
 8008d94:	08008d05 	.word	0x08008d05

08008d98 <__sfp_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	@ (8008da0 <__sfp_lock_acquire+0x8>)
 8008d9a:	f000 ba00 	b.w	800919e <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	200037b9 	.word	0x200037b9

08008da4 <__sfp_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	@ (8008dac <__sfp_lock_release+0x8>)
 8008da6:	f000 b9fb 	b.w	80091a0 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	200037b9 	.word	0x200037b9

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sfp_lock_acquire>
 8008db8:	6a23      	ldr	r3, [r4, #32]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sfp_lock_release>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	@ (8008dd8 <__sinit+0x28>)
 8008dc6:	6223      	str	r3, [r4, #32]
 8008dc8:	4b04      	ldr	r3, [pc, #16]	@ (8008ddc <__sinit+0x2c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f5      	bne.n	8008dbc <__sinit+0xc>
 8008dd0:	f7ff ffc4 	bl	8008d5c <global_stdio_init.part.0>
 8008dd4:	e7f2      	b.n	8008dbc <__sinit+0xc>
 8008dd6:	bf00      	nop
 8008dd8:	08008d1d 	.word	0x08008d1d
 8008ddc:	200037b0 	.word	0x200037b0

08008de0 <_fwalk_sglue>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4607      	mov	r7, r0
 8008de6:	4688      	mov	r8, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	2600      	movs	r6, #0
 8008dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df0:	f1b9 0901 	subs.w	r9, r9, #1
 8008df4:	d505      	bpl.n	8008e02 <_fwalk_sglue+0x22>
 8008df6:	6824      	ldr	r4, [r4, #0]
 8008df8:	2c00      	cmp	r4, #0
 8008dfa:	d1f7      	bne.n	8008dec <_fwalk_sglue+0xc>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d907      	bls.n	8008e18 <_fwalk_sglue+0x38>
 8008e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d003      	beq.n	8008e18 <_fwalk_sglue+0x38>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4638      	mov	r0, r7
 8008e14:	47c0      	blx	r8
 8008e16:	4306      	orrs	r6, r0
 8008e18:	3568      	adds	r5, #104	@ 0x68
 8008e1a:	e7e9      	b.n	8008df0 <_fwalk_sglue+0x10>

08008e1c <iprintf>:
 8008e1c:	b40f      	push	{r0, r1, r2, r3}
 8008e1e:	b507      	push	{r0, r1, r2, lr}
 8008e20:	4906      	ldr	r1, [pc, #24]	@ (8008e3c <iprintf+0x20>)
 8008e22:	ab04      	add	r3, sp, #16
 8008e24:	6808      	ldr	r0, [r1, #0]
 8008e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2a:	6881      	ldr	r1, [r0, #8]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f000 fae9 	bl	8009404 <_vfiprintf_r>
 8008e32:	b003      	add	sp, #12
 8008e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e38:	b004      	add	sp, #16
 8008e3a:	4770      	bx	lr
 8008e3c:	2000001c 	.word	0x2000001c

08008e40 <_puts_r>:
 8008e40:	6a03      	ldr	r3, [r0, #32]
 8008e42:	b570      	push	{r4, r5, r6, lr}
 8008e44:	6884      	ldr	r4, [r0, #8]
 8008e46:	4605      	mov	r5, r0
 8008e48:	460e      	mov	r6, r1
 8008e4a:	b90b      	cbnz	r3, 8008e50 <_puts_r+0x10>
 8008e4c:	f7ff ffb0 	bl	8008db0 <__sinit>
 8008e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e52:	07db      	lsls	r3, r3, #31
 8008e54:	d405      	bmi.n	8008e62 <_puts_r+0x22>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	0598      	lsls	r0, r3, #22
 8008e5a:	d402      	bmi.n	8008e62 <_puts_r+0x22>
 8008e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e5e:	f000 f99e 	bl	800919e <__retarget_lock_acquire_recursive>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	0719      	lsls	r1, r3, #28
 8008e66:	d502      	bpl.n	8008e6e <_puts_r+0x2e>
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d135      	bne.n	8008eda <_puts_r+0x9a>
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 f8c5 	bl	8009000 <__swsetup_r>
 8008e76:	b380      	cbz	r0, 8008eda <_puts_r+0x9a>
 8008e78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_puts_r+0x4e>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_puts_r+0x4e>
 8008e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e8a:	f000 f989 	bl	80091a0 <__retarget_lock_release_recursive>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da04      	bge.n	8008ea0 <_puts_r+0x60>
 8008e96:	69a2      	ldr	r2, [r4, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	dc17      	bgt.n	8008ecc <_puts_r+0x8c>
 8008e9c:	290a      	cmp	r1, #10
 8008e9e:	d015      	beq.n	8008ecc <_puts_r+0x8c>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	6022      	str	r2, [r4, #0]
 8008ea6:	7019      	strb	r1, [r3, #0]
 8008ea8:	68a3      	ldr	r3, [r4, #8]
 8008eaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	60a3      	str	r3, [r4, #8]
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	d1ed      	bne.n	8008e92 <_puts_r+0x52>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da11      	bge.n	8008ede <_puts_r+0x9e>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	210a      	movs	r1, #10
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f85f 	bl	8008f82 <__swbuf_r>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d0d7      	beq.n	8008e78 <_puts_r+0x38>
 8008ec8:	250a      	movs	r5, #10
 8008eca:	e7d7      	b.n	8008e7c <_puts_r+0x3c>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 f857 	bl	8008f82 <__swbuf_r>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d1e7      	bne.n	8008ea8 <_puts_r+0x68>
 8008ed8:	e7ce      	b.n	8008e78 <_puts_r+0x38>
 8008eda:	3e01      	subs	r6, #1
 8008edc:	e7e4      	b.n	8008ea8 <_puts_r+0x68>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	6022      	str	r2, [r4, #0]
 8008ee4:	220a      	movs	r2, #10
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <_puts_r+0x88>
	...

08008eec <puts>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	@ (8008ef8 <puts+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f7ff bfa5 	b.w	8008e40 <_puts_r>
 8008ef6:	bf00      	nop
 8008ef8:	2000001c 	.word	0x2000001c

08008efc <__sread>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	f000 f8fc 	bl	8009100 <_read_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	bfab      	itete	ge
 8008f0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f10:	181b      	addge	r3, r3, r0
 8008f12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f16:	bfac      	ite	ge
 8008f18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f1a:	81a3      	strhlt	r3, [r4, #12]
 8008f1c:	bd10      	pop	{r4, pc}

08008f1e <__swrite>:
 8008f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	461f      	mov	r7, r3
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	05db      	lsls	r3, r3, #23
 8008f28:	4605      	mov	r5, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	d505      	bpl.n	8008f3c <__swrite+0x1e>
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	2302      	movs	r3, #2
 8008f36:	2200      	movs	r2, #0
 8008f38:	f000 f8d0 	bl	80090dc <_lseek_r>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	f000 b8e7 	b.w	8009124 <_write_r>

08008f56 <__sseek>:
 8008f56:	b510      	push	{r4, lr}
 8008f58:	460c      	mov	r4, r1
 8008f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5e:	f000 f8bd 	bl	80090dc <_lseek_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	bf15      	itete	ne
 8008f68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f72:	81a3      	strheq	r3, [r4, #12]
 8008f74:	bf18      	it	ne
 8008f76:	81a3      	strhne	r3, [r4, #12]
 8008f78:	bd10      	pop	{r4, pc}

08008f7a <__sclose>:
 8008f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7e:	f000 b89d 	b.w	80090bc <_close_r>

08008f82 <__swbuf_r>:
 8008f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f84:	460e      	mov	r6, r1
 8008f86:	4614      	mov	r4, r2
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b118      	cbz	r0, 8008f94 <__swbuf_r+0x12>
 8008f8c:	6a03      	ldr	r3, [r0, #32]
 8008f8e:	b90b      	cbnz	r3, 8008f94 <__swbuf_r+0x12>
 8008f90:	f7ff ff0e 	bl	8008db0 <__sinit>
 8008f94:	69a3      	ldr	r3, [r4, #24]
 8008f96:	60a3      	str	r3, [r4, #8]
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	071a      	lsls	r2, r3, #28
 8008f9c:	d501      	bpl.n	8008fa2 <__swbuf_r+0x20>
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	b943      	cbnz	r3, 8008fb4 <__swbuf_r+0x32>
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 f82b 	bl	8009000 <__swsetup_r>
 8008faa:	b118      	cbz	r0, 8008fb4 <__swbuf_r+0x32>
 8008fac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	6922      	ldr	r2, [r4, #16]
 8008fb8:	1a98      	subs	r0, r3, r2
 8008fba:	6963      	ldr	r3, [r4, #20]
 8008fbc:	b2f6      	uxtb	r6, r6
 8008fbe:	4283      	cmp	r3, r0
 8008fc0:	4637      	mov	r7, r6
 8008fc2:	dc05      	bgt.n	8008fd0 <__swbuf_r+0x4e>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 fd46 	bl	8009a58 <_fflush_r>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d1ed      	bne.n	8008fac <__swbuf_r+0x2a>
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	701e      	strb	r6, [r3, #0]
 8008fde:	6962      	ldr	r2, [r4, #20]
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d004      	beq.n	8008ff0 <__swbuf_r+0x6e>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	07db      	lsls	r3, r3, #31
 8008fea:	d5e1      	bpl.n	8008fb0 <__swbuf_r+0x2e>
 8008fec:	2e0a      	cmp	r6, #10
 8008fee:	d1df      	bne.n	8008fb0 <__swbuf_r+0x2e>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 fd30 	bl	8009a58 <_fflush_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0d9      	beq.n	8008fb0 <__swbuf_r+0x2e>
 8008ffc:	e7d6      	b.n	8008fac <__swbuf_r+0x2a>
	...

08009000 <__swsetup_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4b29      	ldr	r3, [pc, #164]	@ (80090a8 <__swsetup_r+0xa8>)
 8009004:	4605      	mov	r5, r0
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	460c      	mov	r4, r1
 800900a:	b118      	cbz	r0, 8009014 <__swsetup_r+0x14>
 800900c:	6a03      	ldr	r3, [r0, #32]
 800900e:	b90b      	cbnz	r3, 8009014 <__swsetup_r+0x14>
 8009010:	f7ff fece 	bl	8008db0 <__sinit>
 8009014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009018:	0719      	lsls	r1, r3, #28
 800901a:	d422      	bmi.n	8009062 <__swsetup_r+0x62>
 800901c:	06da      	lsls	r2, r3, #27
 800901e:	d407      	bmi.n	8009030 <__swsetup_r+0x30>
 8009020:	2209      	movs	r2, #9
 8009022:	602a      	str	r2, [r5, #0]
 8009024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800902e:	e033      	b.n	8009098 <__swsetup_r+0x98>
 8009030:	0758      	lsls	r0, r3, #29
 8009032:	d512      	bpl.n	800905a <__swsetup_r+0x5a>
 8009034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009036:	b141      	cbz	r1, 800904a <__swsetup_r+0x4a>
 8009038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800903c:	4299      	cmp	r1, r3
 800903e:	d002      	beq.n	8009046 <__swsetup_r+0x46>
 8009040:	4628      	mov	r0, r5
 8009042:	f000 f8bd 	bl	80091c0 <_free_r>
 8009046:	2300      	movs	r3, #0
 8009048:	6363      	str	r3, [r4, #52]	@ 0x34
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	2300      	movs	r3, #0
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0308 	orr.w	r3, r3, #8
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	b94b      	cbnz	r3, 800907a <__swsetup_r+0x7a>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800906c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009070:	d003      	beq.n	800907a <__swsetup_r+0x7a>
 8009072:	4621      	mov	r1, r4
 8009074:	4628      	mov	r0, r5
 8009076:	f000 fd3d 	bl	8009af4 <__smakebuf_r>
 800907a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907e:	f013 0201 	ands.w	r2, r3, #1
 8009082:	d00a      	beq.n	800909a <__swsetup_r+0x9a>
 8009084:	2200      	movs	r2, #0
 8009086:	60a2      	str	r2, [r4, #8]
 8009088:	6962      	ldr	r2, [r4, #20]
 800908a:	4252      	negs	r2, r2
 800908c:	61a2      	str	r2, [r4, #24]
 800908e:	6922      	ldr	r2, [r4, #16]
 8009090:	b942      	cbnz	r2, 80090a4 <__swsetup_r+0xa4>
 8009092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009096:	d1c5      	bne.n	8009024 <__swsetup_r+0x24>
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	0799      	lsls	r1, r3, #30
 800909c:	bf58      	it	pl
 800909e:	6962      	ldrpl	r2, [r4, #20]
 80090a0:	60a2      	str	r2, [r4, #8]
 80090a2:	e7f4      	b.n	800908e <__swsetup_r+0x8e>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7f7      	b.n	8009098 <__swsetup_r+0x98>
 80090a8:	2000001c 	.word	0x2000001c

080090ac <memset>:
 80090ac:	4402      	add	r2, r0
 80090ae:	4603      	mov	r3, r0
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d100      	bne.n	80090b6 <memset+0xa>
 80090b4:	4770      	bx	lr
 80090b6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ba:	e7f9      	b.n	80090b0 <memset+0x4>

080090bc <_close_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	@ (80090d8 <_close_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f7 ff03 	bl	8000ed2 <_close>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_close_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_close_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200037b4 	.word	0x200037b4

080090dc <_lseek_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	@ (80090fc <_lseek_r+0x20>)
 80090e0:	4604      	mov	r4, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f7 ff18 	bl	8000f20 <_lseek>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_lseek_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_lseek_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	200037b4 	.word	0x200037b4

08009100 <_read_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_read_r+0x20>)
 8009104:	4604      	mov	r4, r0
 8009106:	4608      	mov	r0, r1
 8009108:	4611      	mov	r1, r2
 800910a:	2200      	movs	r2, #0
 800910c:	602a      	str	r2, [r5, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f7f7 fec2 	bl	8000e98 <_read>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_read_r+0x1e>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_read_r+0x1e>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	200037b4 	.word	0x200037b4

08009124 <_write_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d07      	ldr	r5, [pc, #28]	@ (8009144 <_write_r+0x20>)
 8009128:	4604      	mov	r4, r0
 800912a:	4608      	mov	r0, r1
 800912c:	4611      	mov	r1, r2
 800912e:	2200      	movs	r2, #0
 8009130:	602a      	str	r2, [r5, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f7f7 fa3c 	bl	80005b0 <_write>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d102      	bne.n	8009142 <_write_r+0x1e>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	b103      	cbz	r3, 8009142 <_write_r+0x1e>
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	200037b4 	.word	0x200037b4

08009148 <__errno>:
 8009148:	4b01      	ldr	r3, [pc, #4]	@ (8009150 <__errno+0x8>)
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	2000001c 	.word	0x2000001c

08009154 <__libc_init_array>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	4d0d      	ldr	r5, [pc, #52]	@ (800918c <__libc_init_array+0x38>)
 8009158:	4c0d      	ldr	r4, [pc, #52]	@ (8009190 <__libc_init_array+0x3c>)
 800915a:	1b64      	subs	r4, r4, r5
 800915c:	10a4      	asrs	r4, r4, #2
 800915e:	2600      	movs	r6, #0
 8009160:	42a6      	cmp	r6, r4
 8009162:	d109      	bne.n	8009178 <__libc_init_array+0x24>
 8009164:	4d0b      	ldr	r5, [pc, #44]	@ (8009194 <__libc_init_array+0x40>)
 8009166:	4c0c      	ldr	r4, [pc, #48]	@ (8009198 <__libc_init_array+0x44>)
 8009168:	f000 fd32 	bl	8009bd0 <_init>
 800916c:	1b64      	subs	r4, r4, r5
 800916e:	10a4      	asrs	r4, r4, #2
 8009170:	2600      	movs	r6, #0
 8009172:	42a6      	cmp	r6, r4
 8009174:	d105      	bne.n	8009182 <__libc_init_array+0x2e>
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	f855 3b04 	ldr.w	r3, [r5], #4
 800917c:	4798      	blx	r3
 800917e:	3601      	adds	r6, #1
 8009180:	e7ee      	b.n	8009160 <__libc_init_array+0xc>
 8009182:	f855 3b04 	ldr.w	r3, [r5], #4
 8009186:	4798      	blx	r3
 8009188:	3601      	adds	r6, #1
 800918a:	e7f2      	b.n	8009172 <__libc_init_array+0x1e>
 800918c:	08009d84 	.word	0x08009d84
 8009190:	08009d84 	.word	0x08009d84
 8009194:	08009d84 	.word	0x08009d84
 8009198:	08009d88 	.word	0x08009d88

0800919c <__retarget_lock_init_recursive>:
 800919c:	4770      	bx	lr

0800919e <__retarget_lock_acquire_recursive>:
 800919e:	4770      	bx	lr

080091a0 <__retarget_lock_release_recursive>:
 80091a0:	4770      	bx	lr

080091a2 <memcpy>:
 80091a2:	440a      	add	r2, r1
 80091a4:	4291      	cmp	r1, r2
 80091a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80091aa:	d100      	bne.n	80091ae <memcpy+0xc>
 80091ac:	4770      	bx	lr
 80091ae:	b510      	push	{r4, lr}
 80091b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b8:	4291      	cmp	r1, r2
 80091ba:	d1f9      	bne.n	80091b0 <memcpy+0xe>
 80091bc:	bd10      	pop	{r4, pc}
	...

080091c0 <_free_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4605      	mov	r5, r0
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d041      	beq.n	800924c <_free_r+0x8c>
 80091c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091cc:	1f0c      	subs	r4, r1, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	18e4      	addlt	r4, r4, r3
 80091d4:	f000 f8e0 	bl	8009398 <__malloc_lock>
 80091d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009250 <_free_r+0x90>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x2c>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	4628      	mov	r0, r5
 80091e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e8:	f000 b8dc 	b.w	80093a4 <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x42>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	1821      	adds	r1, r4, r0
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x1e>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x4c>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x42>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1850      	adds	r0, r2, r1
 8009210:	42a0      	cmp	r0, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x6c>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	4401      	add	r1, r0
 8009218:	1850      	adds	r0, r2, r1
 800921a:	4283      	cmp	r3, r0
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x22>
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4408      	add	r0, r1
 8009228:	6010      	str	r0, [r2, #0]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x22>
 800922c:	d902      	bls.n	8009234 <_free_r+0x74>
 800922e:	230c      	movs	r3, #12
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x22>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	1821      	adds	r1, r4, r0
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1809      	addeq	r1, r1, r0
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7ca      	b.n	80091e2 <_free_r+0x22>
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	200037c0 	.word	0x200037c0

08009254 <sbrk_aligned>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0f      	ldr	r6, [pc, #60]	@ (8009294 <sbrk_aligned+0x40>)
 8009258:	460c      	mov	r4, r1
 800925a:	6831      	ldr	r1, [r6, #0]
 800925c:	4605      	mov	r5, r0
 800925e:	b911      	cbnz	r1, 8009266 <sbrk_aligned+0x12>
 8009260:	f000 fca6 	bl	8009bb0 <_sbrk_r>
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 fca1 	bl	8009bb0 <_sbrk_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d103      	bne.n	800927a <sbrk_aligned+0x26>
 8009272:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009276:	4620      	mov	r0, r4
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	1cc4      	adds	r4, r0, #3
 800927c:	f024 0403 	bic.w	r4, r4, #3
 8009280:	42a0      	cmp	r0, r4
 8009282:	d0f8      	beq.n	8009276 <sbrk_aligned+0x22>
 8009284:	1a21      	subs	r1, r4, r0
 8009286:	4628      	mov	r0, r5
 8009288:	f000 fc92 	bl	8009bb0 <_sbrk_r>
 800928c:	3001      	adds	r0, #1
 800928e:	d1f2      	bne.n	8009276 <sbrk_aligned+0x22>
 8009290:	e7ef      	b.n	8009272 <sbrk_aligned+0x1e>
 8009292:	bf00      	nop
 8009294:	200037bc 	.word	0x200037bc

08009298 <_malloc_r>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	1ccd      	adds	r5, r1, #3
 800929e:	f025 0503 	bic.w	r5, r5, #3
 80092a2:	3508      	adds	r5, #8
 80092a4:	2d0c      	cmp	r5, #12
 80092a6:	bf38      	it	cc
 80092a8:	250c      	movcc	r5, #12
 80092aa:	2d00      	cmp	r5, #0
 80092ac:	4606      	mov	r6, r0
 80092ae:	db01      	blt.n	80092b4 <_malloc_r+0x1c>
 80092b0:	42a9      	cmp	r1, r5
 80092b2:	d904      	bls.n	80092be <_malloc_r+0x26>
 80092b4:	230c      	movs	r3, #12
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	2000      	movs	r0, #0
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009394 <_malloc_r+0xfc>
 80092c2:	f000 f869 	bl	8009398 <__malloc_lock>
 80092c6:	f8d8 3000 	ldr.w	r3, [r8]
 80092ca:	461c      	mov	r4, r3
 80092cc:	bb44      	cbnz	r4, 8009320 <_malloc_r+0x88>
 80092ce:	4629      	mov	r1, r5
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ffbf 	bl	8009254 <sbrk_aligned>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	4604      	mov	r4, r0
 80092da:	d158      	bne.n	800938e <_malloc_r+0xf6>
 80092dc:	f8d8 4000 	ldr.w	r4, [r8]
 80092e0:	4627      	mov	r7, r4
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	d143      	bne.n	800936e <_malloc_r+0xd6>
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	d04b      	beq.n	8009382 <_malloc_r+0xea>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	4639      	mov	r1, r7
 80092ee:	4630      	mov	r0, r6
 80092f0:	eb04 0903 	add.w	r9, r4, r3
 80092f4:	f000 fc5c 	bl	8009bb0 <_sbrk_r>
 80092f8:	4581      	cmp	r9, r0
 80092fa:	d142      	bne.n	8009382 <_malloc_r+0xea>
 80092fc:	6821      	ldr	r1, [r4, #0]
 80092fe:	1a6d      	subs	r5, r5, r1
 8009300:	4629      	mov	r1, r5
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ffa6 	bl	8009254 <sbrk_aligned>
 8009308:	3001      	adds	r0, #1
 800930a:	d03a      	beq.n	8009382 <_malloc_r+0xea>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	442b      	add	r3, r5
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	f8d8 3000 	ldr.w	r3, [r8]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	bb62      	cbnz	r2, 8009374 <_malloc_r+0xdc>
 800931a:	f8c8 7000 	str.w	r7, [r8]
 800931e:	e00f      	b.n	8009340 <_malloc_r+0xa8>
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	1b52      	subs	r2, r2, r5
 8009324:	d420      	bmi.n	8009368 <_malloc_r+0xd0>
 8009326:	2a0b      	cmp	r2, #11
 8009328:	d917      	bls.n	800935a <_malloc_r+0xc2>
 800932a:	1961      	adds	r1, r4, r5
 800932c:	42a3      	cmp	r3, r4
 800932e:	6025      	str	r5, [r4, #0]
 8009330:	bf18      	it	ne
 8009332:	6059      	strne	r1, [r3, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	bf08      	it	eq
 8009338:	f8c8 1000 	streq.w	r1, [r8]
 800933c:	5162      	str	r2, [r4, r5]
 800933e:	604b      	str	r3, [r1, #4]
 8009340:	4630      	mov	r0, r6
 8009342:	f000 f82f 	bl	80093a4 <__malloc_unlock>
 8009346:	f104 000b 	add.w	r0, r4, #11
 800934a:	1d23      	adds	r3, r4, #4
 800934c:	f020 0007 	bic.w	r0, r0, #7
 8009350:	1ac2      	subs	r2, r0, r3
 8009352:	bf1c      	itt	ne
 8009354:	1a1b      	subne	r3, r3, r0
 8009356:	50a3      	strne	r3, [r4, r2]
 8009358:	e7af      	b.n	80092ba <_malloc_r+0x22>
 800935a:	6862      	ldr	r2, [r4, #4]
 800935c:	42a3      	cmp	r3, r4
 800935e:	bf0c      	ite	eq
 8009360:	f8c8 2000 	streq.w	r2, [r8]
 8009364:	605a      	strne	r2, [r3, #4]
 8009366:	e7eb      	b.n	8009340 <_malloc_r+0xa8>
 8009368:	4623      	mov	r3, r4
 800936a:	6864      	ldr	r4, [r4, #4]
 800936c:	e7ae      	b.n	80092cc <_malloc_r+0x34>
 800936e:	463c      	mov	r4, r7
 8009370:	687f      	ldr	r7, [r7, #4]
 8009372:	e7b6      	b.n	80092e2 <_malloc_r+0x4a>
 8009374:	461a      	mov	r2, r3
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	42a3      	cmp	r3, r4
 800937a:	d1fb      	bne.n	8009374 <_malloc_r+0xdc>
 800937c:	2300      	movs	r3, #0
 800937e:	6053      	str	r3, [r2, #4]
 8009380:	e7de      	b.n	8009340 <_malloc_r+0xa8>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	4630      	mov	r0, r6
 8009388:	f000 f80c 	bl	80093a4 <__malloc_unlock>
 800938c:	e794      	b.n	80092b8 <_malloc_r+0x20>
 800938e:	6005      	str	r5, [r0, #0]
 8009390:	e7d6      	b.n	8009340 <_malloc_r+0xa8>
 8009392:	bf00      	nop
 8009394:	200037c0 	.word	0x200037c0

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	@ (80093a0 <__malloc_lock+0x8>)
 800939a:	f7ff bf00 	b.w	800919e <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	200037b8 	.word	0x200037b8

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	@ (80093ac <__malloc_unlock+0x8>)
 80093a6:	f7ff befb 	b.w	80091a0 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	200037b8 	.word	0x200037b8

080093b0 <__sfputc_r>:
 80093b0:	6893      	ldr	r3, [r2, #8]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	b410      	push	{r4}
 80093b8:	6093      	str	r3, [r2, #8]
 80093ba:	da08      	bge.n	80093ce <__sfputc_r+0x1e>
 80093bc:	6994      	ldr	r4, [r2, #24]
 80093be:	42a3      	cmp	r3, r4
 80093c0:	db01      	blt.n	80093c6 <__sfputc_r+0x16>
 80093c2:	290a      	cmp	r1, #10
 80093c4:	d103      	bne.n	80093ce <__sfputc_r+0x1e>
 80093c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ca:	f7ff bdda 	b.w	8008f82 <__swbuf_r>
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	1c58      	adds	r0, r3, #1
 80093d2:	6010      	str	r0, [r2, #0]
 80093d4:	7019      	strb	r1, [r3, #0]
 80093d6:	4608      	mov	r0, r1
 80093d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093dc:	4770      	bx	lr

080093de <__sfputs_r>:
 80093de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e0:	4606      	mov	r6, r0
 80093e2:	460f      	mov	r7, r1
 80093e4:	4614      	mov	r4, r2
 80093e6:	18d5      	adds	r5, r2, r3
 80093e8:	42ac      	cmp	r4, r5
 80093ea:	d101      	bne.n	80093f0 <__sfputs_r+0x12>
 80093ec:	2000      	movs	r0, #0
 80093ee:	e007      	b.n	8009400 <__sfputs_r+0x22>
 80093f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f4:	463a      	mov	r2, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7ff ffda 	bl	80093b0 <__sfputc_r>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d1f3      	bne.n	80093e8 <__sfputs_r+0xa>
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009404 <_vfiprintf_r>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	460d      	mov	r5, r1
 800940a:	b09d      	sub	sp, #116	@ 0x74
 800940c:	4614      	mov	r4, r2
 800940e:	4698      	mov	r8, r3
 8009410:	4606      	mov	r6, r0
 8009412:	b118      	cbz	r0, 800941c <_vfiprintf_r+0x18>
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	b90b      	cbnz	r3, 800941c <_vfiprintf_r+0x18>
 8009418:	f7ff fcca 	bl	8008db0 <__sinit>
 800941c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800941e:	07d9      	lsls	r1, r3, #31
 8009420:	d405      	bmi.n	800942e <_vfiprintf_r+0x2a>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	059a      	lsls	r2, r3, #22
 8009426:	d402      	bmi.n	800942e <_vfiprintf_r+0x2a>
 8009428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800942a:	f7ff feb8 	bl	800919e <__retarget_lock_acquire_recursive>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	071b      	lsls	r3, r3, #28
 8009432:	d501      	bpl.n	8009438 <_vfiprintf_r+0x34>
 8009434:	692b      	ldr	r3, [r5, #16]
 8009436:	b99b      	cbnz	r3, 8009460 <_vfiprintf_r+0x5c>
 8009438:	4629      	mov	r1, r5
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff fde0 	bl	8009000 <__swsetup_r>
 8009440:	b170      	cbz	r0, 8009460 <_vfiprintf_r+0x5c>
 8009442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009444:	07dc      	lsls	r4, r3, #31
 8009446:	d504      	bpl.n	8009452 <_vfiprintf_r+0x4e>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800944c:	b01d      	add	sp, #116	@ 0x74
 800944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	0598      	lsls	r0, r3, #22
 8009456:	d4f7      	bmi.n	8009448 <_vfiprintf_r+0x44>
 8009458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800945a:	f7ff fea1 	bl	80091a0 <__retarget_lock_release_recursive>
 800945e:	e7f3      	b.n	8009448 <_vfiprintf_r+0x44>
 8009460:	2300      	movs	r3, #0
 8009462:	9309      	str	r3, [sp, #36]	@ 0x24
 8009464:	2320      	movs	r3, #32
 8009466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800946a:	f8cd 800c 	str.w	r8, [sp, #12]
 800946e:	2330      	movs	r3, #48	@ 0x30
 8009470:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009620 <_vfiprintf_r+0x21c>
 8009474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009478:	f04f 0901 	mov.w	r9, #1
 800947c:	4623      	mov	r3, r4
 800947e:	469a      	mov	sl, r3
 8009480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009484:	b10a      	cbz	r2, 800948a <_vfiprintf_r+0x86>
 8009486:	2a25      	cmp	r2, #37	@ 0x25
 8009488:	d1f9      	bne.n	800947e <_vfiprintf_r+0x7a>
 800948a:	ebba 0b04 	subs.w	fp, sl, r4
 800948e:	d00b      	beq.n	80094a8 <_vfiprintf_r+0xa4>
 8009490:	465b      	mov	r3, fp
 8009492:	4622      	mov	r2, r4
 8009494:	4629      	mov	r1, r5
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ffa1 	bl	80093de <__sfputs_r>
 800949c:	3001      	adds	r0, #1
 800949e:	f000 80a7 	beq.w	80095f0 <_vfiprintf_r+0x1ec>
 80094a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a4:	445a      	add	r2, fp
 80094a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80094a8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 809f 	beq.w	80095f0 <_vfiprintf_r+0x1ec>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094bc:	f10a 0a01 	add.w	sl, sl, #1
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80094ca:	4654      	mov	r4, sl
 80094cc:	2205      	movs	r2, #5
 80094ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d2:	4853      	ldr	r0, [pc, #332]	@ (8009620 <_vfiprintf_r+0x21c>)
 80094d4:	f7f6 fea4 	bl	8000220 <memchr>
 80094d8:	9a04      	ldr	r2, [sp, #16]
 80094da:	b9d8      	cbnz	r0, 8009514 <_vfiprintf_r+0x110>
 80094dc:	06d1      	lsls	r1, r2, #27
 80094de:	bf44      	itt	mi
 80094e0:	2320      	movmi	r3, #32
 80094e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094e6:	0713      	lsls	r3, r2, #28
 80094e8:	bf44      	itt	mi
 80094ea:	232b      	movmi	r3, #43	@ 0x2b
 80094ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094f0:	f89a 3000 	ldrb.w	r3, [sl]
 80094f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094f6:	d015      	beq.n	8009524 <_vfiprintf_r+0x120>
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	4654      	mov	r4, sl
 80094fc:	2000      	movs	r0, #0
 80094fe:	f04f 0c0a 	mov.w	ip, #10
 8009502:	4621      	mov	r1, r4
 8009504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009508:	3b30      	subs	r3, #48	@ 0x30
 800950a:	2b09      	cmp	r3, #9
 800950c:	d94b      	bls.n	80095a6 <_vfiprintf_r+0x1a2>
 800950e:	b1b0      	cbz	r0, 800953e <_vfiprintf_r+0x13a>
 8009510:	9207      	str	r2, [sp, #28]
 8009512:	e014      	b.n	800953e <_vfiprintf_r+0x13a>
 8009514:	eba0 0308 	sub.w	r3, r0, r8
 8009518:	fa09 f303 	lsl.w	r3, r9, r3
 800951c:	4313      	orrs	r3, r2
 800951e:	9304      	str	r3, [sp, #16]
 8009520:	46a2      	mov	sl, r4
 8009522:	e7d2      	b.n	80094ca <_vfiprintf_r+0xc6>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	1d19      	adds	r1, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	9103      	str	r1, [sp, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfbb      	ittet	lt
 8009530:	425b      	neglt	r3, r3
 8009532:	f042 0202 	orrlt.w	r2, r2, #2
 8009536:	9307      	strge	r3, [sp, #28]
 8009538:	9307      	strlt	r3, [sp, #28]
 800953a:	bfb8      	it	lt
 800953c:	9204      	strlt	r2, [sp, #16]
 800953e:	7823      	ldrb	r3, [r4, #0]
 8009540:	2b2e      	cmp	r3, #46	@ 0x2e
 8009542:	d10a      	bne.n	800955a <_vfiprintf_r+0x156>
 8009544:	7863      	ldrb	r3, [r4, #1]
 8009546:	2b2a      	cmp	r3, #42	@ 0x2a
 8009548:	d132      	bne.n	80095b0 <_vfiprintf_r+0x1ac>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	9203      	str	r2, [sp, #12]
 8009552:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009556:	3402      	adds	r4, #2
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009630 <_vfiprintf_r+0x22c>
 800955e:	7821      	ldrb	r1, [r4, #0]
 8009560:	2203      	movs	r2, #3
 8009562:	4650      	mov	r0, sl
 8009564:	f7f6 fe5c 	bl	8000220 <memchr>
 8009568:	b138      	cbz	r0, 800957a <_vfiprintf_r+0x176>
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	eba0 000a 	sub.w	r0, r0, sl
 8009570:	2240      	movs	r2, #64	@ 0x40
 8009572:	4082      	lsls	r2, r0
 8009574:	4313      	orrs	r3, r2
 8009576:	3401      	adds	r4, #1
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957e:	4829      	ldr	r0, [pc, #164]	@ (8009624 <_vfiprintf_r+0x220>)
 8009580:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009584:	2206      	movs	r2, #6
 8009586:	f7f6 fe4b 	bl	8000220 <memchr>
 800958a:	2800      	cmp	r0, #0
 800958c:	d03f      	beq.n	800960e <_vfiprintf_r+0x20a>
 800958e:	4b26      	ldr	r3, [pc, #152]	@ (8009628 <_vfiprintf_r+0x224>)
 8009590:	bb1b      	cbnz	r3, 80095da <_vfiprintf_r+0x1d6>
 8009592:	9b03      	ldr	r3, [sp, #12]
 8009594:	3307      	adds	r3, #7
 8009596:	f023 0307 	bic.w	r3, r3, #7
 800959a:	3308      	adds	r3, #8
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a0:	443b      	add	r3, r7
 80095a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095a4:	e76a      	b.n	800947c <_vfiprintf_r+0x78>
 80095a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095aa:	460c      	mov	r4, r1
 80095ac:	2001      	movs	r0, #1
 80095ae:	e7a8      	b.n	8009502 <_vfiprintf_r+0xfe>
 80095b0:	2300      	movs	r3, #0
 80095b2:	3401      	adds	r4, #1
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	4619      	mov	r1, r3
 80095b8:	f04f 0c0a 	mov.w	ip, #10
 80095bc:	4620      	mov	r0, r4
 80095be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c2:	3a30      	subs	r2, #48	@ 0x30
 80095c4:	2a09      	cmp	r2, #9
 80095c6:	d903      	bls.n	80095d0 <_vfiprintf_r+0x1cc>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0c6      	beq.n	800955a <_vfiprintf_r+0x156>
 80095cc:	9105      	str	r1, [sp, #20]
 80095ce:	e7c4      	b.n	800955a <_vfiprintf_r+0x156>
 80095d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d4:	4604      	mov	r4, r0
 80095d6:	2301      	movs	r3, #1
 80095d8:	e7f0      	b.n	80095bc <_vfiprintf_r+0x1b8>
 80095da:	ab03      	add	r3, sp, #12
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	462a      	mov	r2, r5
 80095e0:	4b12      	ldr	r3, [pc, #72]	@ (800962c <_vfiprintf_r+0x228>)
 80095e2:	a904      	add	r1, sp, #16
 80095e4:	4630      	mov	r0, r6
 80095e6:	f3af 8000 	nop.w
 80095ea:	4607      	mov	r7, r0
 80095ec:	1c78      	adds	r0, r7, #1
 80095ee:	d1d6      	bne.n	800959e <_vfiprintf_r+0x19a>
 80095f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	d405      	bmi.n	8009602 <_vfiprintf_r+0x1fe>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	059a      	lsls	r2, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_vfiprintf_r+0x1fe>
 80095fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095fe:	f7ff fdcf 	bl	80091a0 <__retarget_lock_release_recursive>
 8009602:	89ab      	ldrh	r3, [r5, #12]
 8009604:	065b      	lsls	r3, r3, #25
 8009606:	f53f af1f 	bmi.w	8009448 <_vfiprintf_r+0x44>
 800960a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800960c:	e71e      	b.n	800944c <_vfiprintf_r+0x48>
 800960e:	ab03      	add	r3, sp, #12
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	462a      	mov	r2, r5
 8009614:	4b05      	ldr	r3, [pc, #20]	@ (800962c <_vfiprintf_r+0x228>)
 8009616:	a904      	add	r1, sp, #16
 8009618:	4630      	mov	r0, r6
 800961a:	f000 f879 	bl	8009710 <_printf_i>
 800961e:	e7e4      	b.n	80095ea <_vfiprintf_r+0x1e6>
 8009620:	08009d48 	.word	0x08009d48
 8009624:	08009d52 	.word	0x08009d52
 8009628:	00000000 	.word	0x00000000
 800962c:	080093df 	.word	0x080093df
 8009630:	08009d4e 	.word	0x08009d4e

08009634 <_printf_common>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	4616      	mov	r6, r2
 800963a:	4698      	mov	r8, r3
 800963c:	688a      	ldr	r2, [r1, #8]
 800963e:	690b      	ldr	r3, [r1, #16]
 8009640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009644:	4293      	cmp	r3, r2
 8009646:	bfb8      	it	lt
 8009648:	4613      	movlt	r3, r2
 800964a:	6033      	str	r3, [r6, #0]
 800964c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009650:	4607      	mov	r7, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b10a      	cbz	r2, 800965a <_printf_common+0x26>
 8009656:	3301      	adds	r3, #1
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	0699      	lsls	r1, r3, #26
 800965e:	bf42      	ittt	mi
 8009660:	6833      	ldrmi	r3, [r6, #0]
 8009662:	3302      	addmi	r3, #2
 8009664:	6033      	strmi	r3, [r6, #0]
 8009666:	6825      	ldr	r5, [r4, #0]
 8009668:	f015 0506 	ands.w	r5, r5, #6
 800966c:	d106      	bne.n	800967c <_printf_common+0x48>
 800966e:	f104 0a19 	add.w	sl, r4, #25
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	6832      	ldr	r2, [r6, #0]
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc26      	bgt.n	80096ca <_printf_common+0x96>
 800967c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009680:	6822      	ldr	r2, [r4, #0]
 8009682:	3b00      	subs	r3, #0
 8009684:	bf18      	it	ne
 8009686:	2301      	movne	r3, #1
 8009688:	0692      	lsls	r2, r2, #26
 800968a:	d42b      	bmi.n	80096e4 <_printf_common+0xb0>
 800968c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009690:	4641      	mov	r1, r8
 8009692:	4638      	mov	r0, r7
 8009694:	47c8      	blx	r9
 8009696:	3001      	adds	r0, #1
 8009698:	d01e      	beq.n	80096d8 <_printf_common+0xa4>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	6922      	ldr	r2, [r4, #16]
 800969e:	f003 0306 	and.w	r3, r3, #6
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	bf02      	ittt	eq
 80096a6:	68e5      	ldreq	r5, [r4, #12]
 80096a8:	6833      	ldreq	r3, [r6, #0]
 80096aa:	1aed      	subeq	r5, r5, r3
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	bf0c      	ite	eq
 80096b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b4:	2500      	movne	r5, #0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bfc4      	itt	gt
 80096ba:	1a9b      	subgt	r3, r3, r2
 80096bc:	18ed      	addgt	r5, r5, r3
 80096be:	2600      	movs	r6, #0
 80096c0:	341a      	adds	r4, #26
 80096c2:	42b5      	cmp	r5, r6
 80096c4:	d11a      	bne.n	80096fc <_printf_common+0xc8>
 80096c6:	2000      	movs	r0, #0
 80096c8:	e008      	b.n	80096dc <_printf_common+0xa8>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4641      	mov	r1, r8
 80096d0:	4638      	mov	r0, r7
 80096d2:	47c8      	blx	r9
 80096d4:	3001      	adds	r0, #1
 80096d6:	d103      	bne.n	80096e0 <_printf_common+0xac>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e0:	3501      	adds	r5, #1
 80096e2:	e7c6      	b.n	8009672 <_printf_common+0x3e>
 80096e4:	18e1      	adds	r1, r4, r3
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	2030      	movs	r0, #48	@ 0x30
 80096ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096ee:	4422      	add	r2, r4
 80096f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096f8:	3302      	adds	r3, #2
 80096fa:	e7c7      	b.n	800968c <_printf_common+0x58>
 80096fc:	2301      	movs	r3, #1
 80096fe:	4622      	mov	r2, r4
 8009700:	4641      	mov	r1, r8
 8009702:	4638      	mov	r0, r7
 8009704:	47c8      	blx	r9
 8009706:	3001      	adds	r0, #1
 8009708:	d0e6      	beq.n	80096d8 <_printf_common+0xa4>
 800970a:	3601      	adds	r6, #1
 800970c:	e7d9      	b.n	80096c2 <_printf_common+0x8e>
	...

08009710 <_printf_i>:
 8009710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	7e0f      	ldrb	r7, [r1, #24]
 8009716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009718:	2f78      	cmp	r7, #120	@ 0x78
 800971a:	4691      	mov	r9, r2
 800971c:	4680      	mov	r8, r0
 800971e:	460c      	mov	r4, r1
 8009720:	469a      	mov	sl, r3
 8009722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009726:	d807      	bhi.n	8009738 <_printf_i+0x28>
 8009728:	2f62      	cmp	r7, #98	@ 0x62
 800972a:	d80a      	bhi.n	8009742 <_printf_i+0x32>
 800972c:	2f00      	cmp	r7, #0
 800972e:	f000 80d2 	beq.w	80098d6 <_printf_i+0x1c6>
 8009732:	2f58      	cmp	r7, #88	@ 0x58
 8009734:	f000 80b9 	beq.w	80098aa <_printf_i+0x19a>
 8009738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800973c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009740:	e03a      	b.n	80097b8 <_printf_i+0xa8>
 8009742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009746:	2b15      	cmp	r3, #21
 8009748:	d8f6      	bhi.n	8009738 <_printf_i+0x28>
 800974a:	a101      	add	r1, pc, #4	@ (adr r1, 8009750 <_printf_i+0x40>)
 800974c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097bd 	.word	0x080097bd
 8009758:	08009739 	.word	0x08009739
 800975c:	08009739 	.word	0x08009739
 8009760:	08009739 	.word	0x08009739
 8009764:	08009739 	.word	0x08009739
 8009768:	080097bd 	.word	0x080097bd
 800976c:	08009739 	.word	0x08009739
 8009770:	08009739 	.word	0x08009739
 8009774:	08009739 	.word	0x08009739
 8009778:	08009739 	.word	0x08009739
 800977c:	080098bd 	.word	0x080098bd
 8009780:	080097e7 	.word	0x080097e7
 8009784:	08009877 	.word	0x08009877
 8009788:	08009739 	.word	0x08009739
 800978c:	08009739 	.word	0x08009739
 8009790:	080098df 	.word	0x080098df
 8009794:	08009739 	.word	0x08009739
 8009798:	080097e7 	.word	0x080097e7
 800979c:	08009739 	.word	0x08009739
 80097a0:	08009739 	.word	0x08009739
 80097a4:	0800987f 	.word	0x0800987f
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6032      	str	r2, [r6, #0]
 80097b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097b8:	2301      	movs	r3, #1
 80097ba:	e09d      	b.n	80098f8 <_printf_i+0x1e8>
 80097bc:	6833      	ldr	r3, [r6, #0]
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	1d19      	adds	r1, r3, #4
 80097c2:	6031      	str	r1, [r6, #0]
 80097c4:	0606      	lsls	r6, r0, #24
 80097c6:	d501      	bpl.n	80097cc <_printf_i+0xbc>
 80097c8:	681d      	ldr	r5, [r3, #0]
 80097ca:	e003      	b.n	80097d4 <_printf_i+0xc4>
 80097cc:	0645      	lsls	r5, r0, #25
 80097ce:	d5fb      	bpl.n	80097c8 <_printf_i+0xb8>
 80097d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097d4:	2d00      	cmp	r5, #0
 80097d6:	da03      	bge.n	80097e0 <_printf_i+0xd0>
 80097d8:	232d      	movs	r3, #45	@ 0x2d
 80097da:	426d      	negs	r5, r5
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e0:	4859      	ldr	r0, [pc, #356]	@ (8009948 <_printf_i+0x238>)
 80097e2:	230a      	movs	r3, #10
 80097e4:	e011      	b.n	800980a <_printf_i+0xfa>
 80097e6:	6821      	ldr	r1, [r4, #0]
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	0608      	lsls	r0, r1, #24
 80097ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80097f0:	d402      	bmi.n	80097f8 <_printf_i+0xe8>
 80097f2:	0649      	lsls	r1, r1, #25
 80097f4:	bf48      	it	mi
 80097f6:	b2ad      	uxthmi	r5, r5
 80097f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80097fa:	4853      	ldr	r0, [pc, #332]	@ (8009948 <_printf_i+0x238>)
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	bf14      	ite	ne
 8009800:	230a      	movne	r3, #10
 8009802:	2308      	moveq	r3, #8
 8009804:	2100      	movs	r1, #0
 8009806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800980a:	6866      	ldr	r6, [r4, #4]
 800980c:	60a6      	str	r6, [r4, #8]
 800980e:	2e00      	cmp	r6, #0
 8009810:	bfa2      	ittt	ge
 8009812:	6821      	ldrge	r1, [r4, #0]
 8009814:	f021 0104 	bicge.w	r1, r1, #4
 8009818:	6021      	strge	r1, [r4, #0]
 800981a:	b90d      	cbnz	r5, 8009820 <_printf_i+0x110>
 800981c:	2e00      	cmp	r6, #0
 800981e:	d04b      	beq.n	80098b8 <_printf_i+0x1a8>
 8009820:	4616      	mov	r6, r2
 8009822:	fbb5 f1f3 	udiv	r1, r5, r3
 8009826:	fb03 5711 	mls	r7, r3, r1, r5
 800982a:	5dc7      	ldrb	r7, [r0, r7]
 800982c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009830:	462f      	mov	r7, r5
 8009832:	42bb      	cmp	r3, r7
 8009834:	460d      	mov	r5, r1
 8009836:	d9f4      	bls.n	8009822 <_printf_i+0x112>
 8009838:	2b08      	cmp	r3, #8
 800983a:	d10b      	bne.n	8009854 <_printf_i+0x144>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	07df      	lsls	r7, r3, #31
 8009840:	d508      	bpl.n	8009854 <_printf_i+0x144>
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	6861      	ldr	r1, [r4, #4]
 8009846:	4299      	cmp	r1, r3
 8009848:	bfde      	ittt	le
 800984a:	2330      	movle	r3, #48	@ 0x30
 800984c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009850:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009854:	1b92      	subs	r2, r2, r6
 8009856:	6122      	str	r2, [r4, #16]
 8009858:	f8cd a000 	str.w	sl, [sp]
 800985c:	464b      	mov	r3, r9
 800985e:	aa03      	add	r2, sp, #12
 8009860:	4621      	mov	r1, r4
 8009862:	4640      	mov	r0, r8
 8009864:	f7ff fee6 	bl	8009634 <_printf_common>
 8009868:	3001      	adds	r0, #1
 800986a:	d14a      	bne.n	8009902 <_printf_i+0x1f2>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009870:	b004      	add	sp, #16
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	f043 0320 	orr.w	r3, r3, #32
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	4833      	ldr	r0, [pc, #204]	@ (800994c <_printf_i+0x23c>)
 8009880:	2778      	movs	r7, #120	@ 0x78
 8009882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	6831      	ldr	r1, [r6, #0]
 800988a:	061f      	lsls	r7, r3, #24
 800988c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009890:	d402      	bmi.n	8009898 <_printf_i+0x188>
 8009892:	065f      	lsls	r7, r3, #25
 8009894:	bf48      	it	mi
 8009896:	b2ad      	uxthmi	r5, r5
 8009898:	6031      	str	r1, [r6, #0]
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	bf44      	itt	mi
 800989e:	f043 0320 	orrmi.w	r3, r3, #32
 80098a2:	6023      	strmi	r3, [r4, #0]
 80098a4:	b11d      	cbz	r5, 80098ae <_printf_i+0x19e>
 80098a6:	2310      	movs	r3, #16
 80098a8:	e7ac      	b.n	8009804 <_printf_i+0xf4>
 80098aa:	4827      	ldr	r0, [pc, #156]	@ (8009948 <_printf_i+0x238>)
 80098ac:	e7e9      	b.n	8009882 <_printf_i+0x172>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	f023 0320 	bic.w	r3, r3, #32
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	e7f6      	b.n	80098a6 <_printf_i+0x196>
 80098b8:	4616      	mov	r6, r2
 80098ba:	e7bd      	b.n	8009838 <_printf_i+0x128>
 80098bc:	6833      	ldr	r3, [r6, #0]
 80098be:	6825      	ldr	r5, [r4, #0]
 80098c0:	6961      	ldr	r1, [r4, #20]
 80098c2:	1d18      	adds	r0, r3, #4
 80098c4:	6030      	str	r0, [r6, #0]
 80098c6:	062e      	lsls	r6, r5, #24
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	d501      	bpl.n	80098d0 <_printf_i+0x1c0>
 80098cc:	6019      	str	r1, [r3, #0]
 80098ce:	e002      	b.n	80098d6 <_printf_i+0x1c6>
 80098d0:	0668      	lsls	r0, r5, #25
 80098d2:	d5fb      	bpl.n	80098cc <_printf_i+0x1bc>
 80098d4:	8019      	strh	r1, [r3, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	4616      	mov	r6, r2
 80098dc:	e7bc      	b.n	8009858 <_printf_i+0x148>
 80098de:	6833      	ldr	r3, [r6, #0]
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	6032      	str	r2, [r6, #0]
 80098e4:	681e      	ldr	r6, [r3, #0]
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	2100      	movs	r1, #0
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7f6 fc98 	bl	8000220 <memchr>
 80098f0:	b108      	cbz	r0, 80098f6 <_printf_i+0x1e6>
 80098f2:	1b80      	subs	r0, r0, r6
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	2300      	movs	r3, #0
 80098fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009900:	e7aa      	b.n	8009858 <_printf_i+0x148>
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	4632      	mov	r2, r6
 8009906:	4649      	mov	r1, r9
 8009908:	4640      	mov	r0, r8
 800990a:	47d0      	blx	sl
 800990c:	3001      	adds	r0, #1
 800990e:	d0ad      	beq.n	800986c <_printf_i+0x15c>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	079b      	lsls	r3, r3, #30
 8009914:	d413      	bmi.n	800993e <_printf_i+0x22e>
 8009916:	68e0      	ldr	r0, [r4, #12]
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	4298      	cmp	r0, r3
 800991c:	bfb8      	it	lt
 800991e:	4618      	movlt	r0, r3
 8009920:	e7a6      	b.n	8009870 <_printf_i+0x160>
 8009922:	2301      	movs	r3, #1
 8009924:	4632      	mov	r2, r6
 8009926:	4649      	mov	r1, r9
 8009928:	4640      	mov	r0, r8
 800992a:	47d0      	blx	sl
 800992c:	3001      	adds	r0, #1
 800992e:	d09d      	beq.n	800986c <_printf_i+0x15c>
 8009930:	3501      	adds	r5, #1
 8009932:	68e3      	ldr	r3, [r4, #12]
 8009934:	9903      	ldr	r1, [sp, #12]
 8009936:	1a5b      	subs	r3, r3, r1
 8009938:	42ab      	cmp	r3, r5
 800993a:	dcf2      	bgt.n	8009922 <_printf_i+0x212>
 800993c:	e7eb      	b.n	8009916 <_printf_i+0x206>
 800993e:	2500      	movs	r5, #0
 8009940:	f104 0619 	add.w	r6, r4, #25
 8009944:	e7f5      	b.n	8009932 <_printf_i+0x222>
 8009946:	bf00      	nop
 8009948:	08009d59 	.word	0x08009d59
 800994c:	08009d6a 	.word	0x08009d6a

08009950 <__sflush_r>:
 8009950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	0716      	lsls	r6, r2, #28
 800995a:	4605      	mov	r5, r0
 800995c:	460c      	mov	r4, r1
 800995e:	d454      	bmi.n	8009a0a <__sflush_r+0xba>
 8009960:	684b      	ldr	r3, [r1, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dc02      	bgt.n	800996c <__sflush_r+0x1c>
 8009966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	dd48      	ble.n	80099fe <__sflush_r+0xae>
 800996c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800996e:	2e00      	cmp	r6, #0
 8009970:	d045      	beq.n	80099fe <__sflush_r+0xae>
 8009972:	2300      	movs	r3, #0
 8009974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009978:	682f      	ldr	r7, [r5, #0]
 800997a:	6a21      	ldr	r1, [r4, #32]
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	d030      	beq.n	80099e2 <__sflush_r+0x92>
 8009980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	0759      	lsls	r1, r3, #29
 8009986:	d505      	bpl.n	8009994 <__sflush_r+0x44>
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800998e:	b10b      	cbz	r3, 8009994 <__sflush_r+0x44>
 8009990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009992:	1ad2      	subs	r2, r2, r3
 8009994:	2300      	movs	r3, #0
 8009996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009998:	6a21      	ldr	r1, [r4, #32]
 800999a:	4628      	mov	r0, r5
 800999c:	47b0      	blx	r6
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	d106      	bne.n	80099b2 <__sflush_r+0x62>
 80099a4:	6829      	ldr	r1, [r5, #0]
 80099a6:	291d      	cmp	r1, #29
 80099a8:	d82b      	bhi.n	8009a02 <__sflush_r+0xb2>
 80099aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009a54 <__sflush_r+0x104>)
 80099ac:	410a      	asrs	r2, r1
 80099ae:	07d6      	lsls	r6, r2, #31
 80099b0:	d427      	bmi.n	8009a02 <__sflush_r+0xb2>
 80099b2:	2200      	movs	r2, #0
 80099b4:	6062      	str	r2, [r4, #4]
 80099b6:	04d9      	lsls	r1, r3, #19
 80099b8:	6922      	ldr	r2, [r4, #16]
 80099ba:	6022      	str	r2, [r4, #0]
 80099bc:	d504      	bpl.n	80099c8 <__sflush_r+0x78>
 80099be:	1c42      	adds	r2, r0, #1
 80099c0:	d101      	bne.n	80099c6 <__sflush_r+0x76>
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	b903      	cbnz	r3, 80099c8 <__sflush_r+0x78>
 80099c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80099c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ca:	602f      	str	r7, [r5, #0]
 80099cc:	b1b9      	cbz	r1, 80099fe <__sflush_r+0xae>
 80099ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099d2:	4299      	cmp	r1, r3
 80099d4:	d002      	beq.n	80099dc <__sflush_r+0x8c>
 80099d6:	4628      	mov	r0, r5
 80099d8:	f7ff fbf2 	bl	80091c0 <_free_r>
 80099dc:	2300      	movs	r3, #0
 80099de:	6363      	str	r3, [r4, #52]	@ 0x34
 80099e0:	e00d      	b.n	80099fe <__sflush_r+0xae>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b0      	blx	r6
 80099e8:	4602      	mov	r2, r0
 80099ea:	1c50      	adds	r0, r2, #1
 80099ec:	d1c9      	bne.n	8009982 <__sflush_r+0x32>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0c6      	beq.n	8009982 <__sflush_r+0x32>
 80099f4:	2b1d      	cmp	r3, #29
 80099f6:	d001      	beq.n	80099fc <__sflush_r+0xac>
 80099f8:	2b16      	cmp	r3, #22
 80099fa:	d11e      	bne.n	8009a3a <__sflush_r+0xea>
 80099fc:	602f      	str	r7, [r5, #0]
 80099fe:	2000      	movs	r0, #0
 8009a00:	e022      	b.n	8009a48 <__sflush_r+0xf8>
 8009a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a06:	b21b      	sxth	r3, r3
 8009a08:	e01b      	b.n	8009a42 <__sflush_r+0xf2>
 8009a0a:	690f      	ldr	r7, [r1, #16]
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	d0f6      	beq.n	80099fe <__sflush_r+0xae>
 8009a10:	0793      	lsls	r3, r2, #30
 8009a12:	680e      	ldr	r6, [r1, #0]
 8009a14:	bf08      	it	eq
 8009a16:	694b      	ldreq	r3, [r1, #20]
 8009a18:	600f      	str	r7, [r1, #0]
 8009a1a:	bf18      	it	ne
 8009a1c:	2300      	movne	r3, #0
 8009a1e:	eba6 0807 	sub.w	r8, r6, r7
 8009a22:	608b      	str	r3, [r1, #8]
 8009a24:	f1b8 0f00 	cmp.w	r8, #0
 8009a28:	dde9      	ble.n	80099fe <__sflush_r+0xae>
 8009a2a:	6a21      	ldr	r1, [r4, #32]
 8009a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a2e:	4643      	mov	r3, r8
 8009a30:	463a      	mov	r2, r7
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b0      	blx	r6
 8009a36:	2800      	cmp	r0, #0
 8009a38:	dc08      	bgt.n	8009a4c <__sflush_r+0xfc>
 8009a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4c:	4407      	add	r7, r0
 8009a4e:	eba8 0800 	sub.w	r8, r8, r0
 8009a52:	e7e7      	b.n	8009a24 <__sflush_r+0xd4>
 8009a54:	dfbffffe 	.word	0xdfbffffe

08009a58 <_fflush_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	690b      	ldr	r3, [r1, #16]
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	b913      	cbnz	r3, 8009a68 <_fflush_r+0x10>
 8009a62:	2500      	movs	r5, #0
 8009a64:	4628      	mov	r0, r5
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	b118      	cbz	r0, 8009a72 <_fflush_r+0x1a>
 8009a6a:	6a03      	ldr	r3, [r0, #32]
 8009a6c:	b90b      	cbnz	r3, 8009a72 <_fflush_r+0x1a>
 8009a6e:	f7ff f99f 	bl	8008db0 <__sinit>
 8009a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f3      	beq.n	8009a62 <_fflush_r+0xa>
 8009a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a7c:	07d0      	lsls	r0, r2, #31
 8009a7e:	d404      	bmi.n	8009a8a <_fflush_r+0x32>
 8009a80:	0599      	lsls	r1, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_fflush_r+0x32>
 8009a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a86:	f7ff fb8a 	bl	800919e <__retarget_lock_acquire_recursive>
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f7ff ff5f 	bl	8009950 <__sflush_r>
 8009a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a94:	07da      	lsls	r2, r3, #31
 8009a96:	4605      	mov	r5, r0
 8009a98:	d4e4      	bmi.n	8009a64 <_fflush_r+0xc>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	059b      	lsls	r3, r3, #22
 8009a9e:	d4e1      	bmi.n	8009a64 <_fflush_r+0xc>
 8009aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aa2:	f7ff fb7d 	bl	80091a0 <__retarget_lock_release_recursive>
 8009aa6:	e7dd      	b.n	8009a64 <_fflush_r+0xc>

08009aa8 <__swhatbuf_r>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	460c      	mov	r4, r1
 8009aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	b096      	sub	sp, #88	@ 0x58
 8009ab4:	4615      	mov	r5, r2
 8009ab6:	461e      	mov	r6, r3
 8009ab8:	da0d      	bge.n	8009ad6 <__swhatbuf_r+0x2e>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ac0:	f04f 0100 	mov.w	r1, #0
 8009ac4:	bf14      	ite	ne
 8009ac6:	2340      	movne	r3, #64	@ 0x40
 8009ac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009acc:	2000      	movs	r0, #0
 8009ace:	6031      	str	r1, [r6, #0]
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	b016      	add	sp, #88	@ 0x58
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	466a      	mov	r2, sp
 8009ad8:	f000 f848 	bl	8009b6c <_fstat_r>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	dbec      	blt.n	8009aba <__swhatbuf_r+0x12>
 8009ae0:	9901      	ldr	r1, [sp, #4]
 8009ae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009aea:	4259      	negs	r1, r3
 8009aec:	4159      	adcs	r1, r3
 8009aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009af2:	e7eb      	b.n	8009acc <__swhatbuf_r+0x24>

08009af4 <__smakebuf_r>:
 8009af4:	898b      	ldrh	r3, [r1, #12]
 8009af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009af8:	079d      	lsls	r5, r3, #30
 8009afa:	4606      	mov	r6, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	d507      	bpl.n	8009b10 <__smakebuf_r+0x1c>
 8009b00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	6123      	str	r3, [r4, #16]
 8009b08:	2301      	movs	r3, #1
 8009b0a:	6163      	str	r3, [r4, #20]
 8009b0c:	b003      	add	sp, #12
 8009b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b10:	ab01      	add	r3, sp, #4
 8009b12:	466a      	mov	r2, sp
 8009b14:	f7ff ffc8 	bl	8009aa8 <__swhatbuf_r>
 8009b18:	9f00      	ldr	r7, [sp, #0]
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f7ff fbba 	bl	8009298 <_malloc_r>
 8009b24:	b948      	cbnz	r0, 8009b3a <__smakebuf_r+0x46>
 8009b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2a:	059a      	lsls	r2, r3, #22
 8009b2c:	d4ee      	bmi.n	8009b0c <__smakebuf_r+0x18>
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	e7e2      	b.n	8009b00 <__smakebuf_r+0xc>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	6020      	str	r0, [r4, #0]
 8009b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b4a:	b15b      	cbz	r3, 8009b64 <__smakebuf_r+0x70>
 8009b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b50:	4630      	mov	r0, r6
 8009b52:	f000 f81d 	bl	8009b90 <_isatty_r>
 8009b56:	b128      	cbz	r0, 8009b64 <__smakebuf_r+0x70>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	431d      	orrs	r5, r3
 8009b68:	81a5      	strh	r5, [r4, #12]
 8009b6a:	e7cf      	b.n	8009b0c <__smakebuf_r+0x18>

08009b6c <_fstat_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	@ (8009b8c <_fstat_r+0x20>)
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f7f7 f9b6 	bl	8000eea <_fstat>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d102      	bne.n	8009b88 <_fstat_r+0x1c>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b103      	cbz	r3, 8009b88 <_fstat_r+0x1c>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200037b4 	.word	0x200037b4

08009b90 <_isatty_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d06      	ldr	r5, [pc, #24]	@ (8009bac <_isatty_r+0x1c>)
 8009b94:	2300      	movs	r3, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	f7f7 f9b5 	bl	8000f0a <_isatty>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_isatty_r+0x1a>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_isatty_r+0x1a>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	200037b4 	.word	0x200037b4

08009bb0 <_sbrk_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d06      	ldr	r5, [pc, #24]	@ (8009bcc <_sbrk_r+0x1c>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f7 f9be 	bl	8000f3c <_sbrk>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_sbrk_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_sbrk_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	200037b4 	.word	0x200037b4

08009bd0 <_init>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr

08009bdc <_fini>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr
